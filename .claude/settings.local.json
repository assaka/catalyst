{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(npm install:*)",
      "Bash(npm run dev:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(npm run build:*)",
      "Bash(vercel:*)",
      "Bash(curl:*)",
      "Bash(npm run lint)",
      "Bash(npm run lint:*)",
      "Bash(ls:*)",
      "WebFetch(domain:catalyst-backend-fzhu.onrender.com)",
      "Bash(node:*)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node debug-email-chars.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node debug-constraints.js)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -f cleanup-duplicate-tables.sql)",
      "Bash(grep:*)",
      "Bash(for file in AttributeSet.js Coupon.js DeliverySettings.js OrderItem.js ShippingMethod.js Tax.js)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(tail:*)",
      "Bash(done)",
      "Bash(mv:*)",
      "Bash(true)",
      "Bash(find:*)",
      "Bash(npm run migrate:*)",
      "Bash(cd backend)",
      "Bash(git revert:*)",
      "WebFetch(domain:catalyst-pearl.vercel.app)",
      "Bash(sed:*)",
      "Bash(git checkout:*)",
      "Bash(for:*)",
      "Bash(do echo \"Cleaning $file\")",
      "Bash(rm:*)",
      "Bash(npm run test:*)",
      "Bash(npm start)",
      "Bash(pkill:*)",
      "Bash(rg:*)",
      "Bash(npm run sync:tables:*)",
      "Bash(npm run db:query:*)",
      "Bash(npx sequelize-cli:*)",
      "Bash(taskkill:*)",
      "WebFetch(domain:localhost)",
      "Bash(do echo \"Updating $file...\")",
      "Bash(git deploy:*)",
      "Bash(npm run:*)",
      "WebFetch(domain:api.akeneo.com)",
      "Bash(timeout 5 npm start)",
      "Bash(timeout 5 npm start)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection'');\n(async () => {\n  try {\n    const [results] = await sequelize.query(''SELECT column_name, data_type FROM information_schema.columns WHERE table_name = \\''integration_configs\\'' ORDER BY ordinal_position;'');\n    console.log(''Current integration_configs table structure:'');\n    results.forEach(row => console.log(\\`- ${row.column_name}: ${row.data_type}\\`));\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await sequelize.close();\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d integration_configs\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -f add-integration-columns.sql)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node migrate-integration-table.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-imported-categories.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    const [results] = await sequelize.query(''SELECT COUNT(*) as total, store_id FROM attributes GROUP BY store_id;'');\n    console.log(''Attributes count by store:'');\n    results.forEach(row => console.log(\\`Store ${row.store_id}: ${row.total} attributes\\`));\n    \n    const [sample] = await sequelize.query(''SELECT name, code, type, store_id FROM attributes LIMIT 15;'');\n    console.log(''\\nSample attributes:'');\n    sample.forEach(attr => console.log(\\`- ${attr.name} (${attr.code}) - ${attr.type} - Store: ${attr.store_id}\\`));\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await sequelize.close();\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-attributes.js)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"SELECT COUNT(*) as total_attributes FROM attributes WHERE store_id = ''157d4590-49bf-4b0b-bd77-abe131909528'';\")",
      "Bash(git restore:*)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node run-akeneo-schedules-migration.js)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d akeneo_schedules\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node verify-akeneo-schedules.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    const [results] = await sequelize.query(''SELECT id, name, parent_id, level FROM categories WHERE name ILIKE \\''%welhof%\\'' ORDER BY name;'');\n    console.log(''Current Welhof categories:'');\n    results.forEach(cat => console.log(\\`- ${cat.name} (ID: ${cat.id}) - Parent: ${cat.parent_id || ''null''} - Level: ${cat.level}\\`));\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await sequelize.close();\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    const [results] = await sequelize.query(''SELECT id, name, parent_id, level FROM categories WHERE name ILIKE \\''%welhof%\\'' ORDER BY name;'');\n    console.log(''Current Welhof categories:'');\n    results.forEach(cat => console.log(\\`- ${cat.name} (ID: ${cat.id}) - Parent: ${cat.parent_id || \\''null\\''} - Level: ${cat.level}\\`));\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await sequelize.close();\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node fix-welhof-categories.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node fix-welhof-categories.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-all-categories.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node clear-and-create-root-category.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node recreate-categories-table.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking current localStorage contents...'');\n    // This won''t work in Node.js, let me check the backend auth middleware instead\n    \n    const [results] = await sequelize.query(''SELECT * FROM redirects ORDER BY created_at DESC LIMIT 10;'');\n    console.log(''📋 Recent redirects in database:'');\n    results.forEach(redirect => console.log(`- $redirect.old_url → $redirect.new_url ($redirect.created_at)`));\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await sequelize.close();\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"SELECT * FROM redirects ORDER BY created_at DESC LIMIT 5;\")",
      "Bash(NODE_ENV=production node -e \"\nconst path = require(''path'');\nprocess.chdir(''./backend'');\nrequire(''dotenv'').config({ path: ''.env.local'' });\nconsole.log(''JWT_SECRET exists:'', Boolean(process.env.JWT_SECRET));\nconsole.log(''JWT_SECRET value:'', process.env.JWT_SECRET);\nconsole.log(''NODE_ENV:'', process.env.NODE_ENV);\n\")",
      "Bash(npm run:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d redirects\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-redirects-table.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-redirects-table.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking redirects table structure...'');\n    const [results] = await sequelize.query(''SELECT column_name, data_type FROM information_schema.columns WHERE table_name = \\''redirects\\'' ORDER BY ordinal_position;'');\n    \n    if (results.length === 0) {\n      console.log(''❌ Redirects table does not exist!'');\n    } else {\n      console.log(''✅ Redirects table columns:'');\n      results.forEach(col => console.log(''- '' + col.column_name + '': '' + col.data_type));\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking all redirects table columns...'');\n    const [results] = await sequelize.query(''SELECT column_name, data_type, is_nullable, column_default FROM information_schema.columns WHERE table_name = \\''redirects\\'' ORDER BY ordinal_position;'');\n    \n    console.log(''📋 Full redirects table structure:'');\n    results.forEach(col => {\n      console.log(''- '' + col.column_name + '': '' + col.data_type + '' '' + (col.is_nullable === ''NO'' ? ''NOT NULL'' : ''NULL'') + '' '' + (col.column_default || ''''));\n    });\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -f fix-redirects-table.sql)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔧 Adding missing columns to redirects table...'');\n    \n    await sequelize.query(\\`\n      ALTER TABLE redirects \n      ADD COLUMN IF NOT EXISTS entity_type VARCHAR(50),\n      ADD COLUMN IF NOT EXISTS entity_id UUID,\n      ADD COLUMN IF NOT EXISTS created_by UUID,\n      ADD COLUMN IF NOT EXISTS notes TEXT,\n      ADD COLUMN IF NOT EXISTS hit_count INTEGER DEFAULT 0,\n      ADD COLUMN IF NOT EXISTS last_used_at TIMESTAMP;\n    \\`);\n    \n    console.log(''✅ Successfully added missing columns'');\n    \n    // Verify the new structure\n    const [results] = await sequelize.query(''SELECT column_name FROM information_schema.columns WHERE table_name = \\''redirects\\'' ORDER BY ordinal_position;'');\n    console.log(''📋 Updated table columns:'');\n    results.forEach(col => console.log(''- '' + col.column_name));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔧 Adding missing columns to redirects table...'');\n    \n    const sql = ''ALTER TABLE redirects ADD COLUMN IF NOT EXISTS entity_type VARCHAR(50), ADD COLUMN IF NOT EXISTS entity_id UUID, ADD COLUMN IF NOT EXISTS created_by UUID, ADD COLUMN IF NOT EXISTS notes TEXT, ADD COLUMN IF NOT EXISTS hit_count INTEGER DEFAULT 0, ADD COLUMN IF NOT EXISTS last_used_at TIMESTAMP;'';\n    \n    await sequelize.query(sql);\n    \n    console.log(''✅ Successfully added missing columns'');\n    \n    // Verify the new structure\n    const [results] = await sequelize.query(''SELECT column_name FROM information_schema.columns WHERE table_name = \\''redirects\\'' ORDER BY ordinal_position;'');\n    console.log(''📋 Updated table columns:'');\n    results.forEach(col => console.log(''- '' + col.column_name));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(git reset:*)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    const [results] = await sequelize.query(''SELECT id, title, slug, store_id FROM cms_pages WHERE slug LIKE \\''%404%\\'' ORDER BY slug;'');\n    console.log(''📋 Existing 404 pages:'');\n    results.forEach(page => console.log(\\`- ${page.slug} (${page.title}) - Store: ${page.store_id}\\`));\n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(git rm:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d customer_activities\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking customer_activities table...'');\n    const [results] = await sequelize.query(''SELECT column_name, data_type FROM information_schema.columns WHERE table_name = \\''customer_activities\\'' ORDER BY ordinal_position;'');\n    \n    if (results.length === 0) {\n      console.log(''❌ customer_activities table does not exist!'');\n      \n      // Check what tables do exist\n      const [tables] = await sequelize.query(''SELECT table_name FROM information_schema.tables WHERE table_schema = \\''public\\'' AND table_name LIKE \\''%activity%\\'' OR table_name LIKE \\''%customer%\\'';'');\n      console.log(''📋 Related tables found:'');\n      tables.forEach(table => console.log(''- '' + table.table_name));\n    } else {\n      console.log(''✅ customer_activities table structure:'');\n      results.forEach(col => console.log(''- '' + col.column_name + '': '' + col.data_type));\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking customer_activities records...'');\n    const [results] = await sequelize.query(''SELECT COUNT(*) as total, activity_type, MAX(created_at) as latest FROM customer_activities GROUP BY activity_type ORDER BY total DESC;'');\n    \n    if (results.length === 0) {\n      console.log(''❌ No customer activities found in database'');\n      \n      // Check total count\n      const [total] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n      console.log(''📊 Total records in customer_activities table:'', total[0].count);\n    } else {\n      console.log(''📊 Customer activities summary:'');\n      results.forEach(row => console.log(\\`- ${row.activity_type}: ${row.total} records (latest: ${row.latest})\\`));\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking customer_activities records...'');\n    const [total] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n    console.log(''📊 Total records in customer_activities table:'', total[0].count);\n    \n    if (total[0].count > 0) {\n      const [results] = await sequelize.query(''SELECT activity_type, COUNT(*) as total, MAX(created_at) as latest FROM customer_activities GROUP BY activity_type ORDER BY total DESC LIMIT 10;'');\n      console.log(''📊 Customer activities by type:'');\n      results.forEach(row => console.log(''- '' + row.activity_type + '': '' + row.total + '' records (latest: '' + row.latest + '')''));\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-tracking.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-tracking.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Testing direct database insert...'');\n    \n    // Test direct SQL insert\n    const testData = {\n      session_id: ''test_session_'' + Date.now(),\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n      activity_type: ''test_tracking'',\n      page_url: ''http://localhost:3000/test'',\n      referrer: '''',\n      user_agent: ''Test Script'',\n      metadata: JSON.stringify({ test: true, timestamp: new Date().toISOString() })\n    };\n    \n    const [result] = await sequelize.query(\n      ''INSERT INTO customer_activities (session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (:session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n      {\n        replacements: testData,\n        type: sequelize.QueryTypes.INSERT\n      }\n    );\n    \n    console.log(''✅ Test record inserted with ID:'', result[0].id);\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n    console.log(''📊 Total records:'', count[0].count);\n    \n    // Clean up test record\n    await sequelize.query(''DELETE FROM customer_activities WHERE id = :id'', {\n      replacements: { id: result[0].id }\n    });\n    console.log(''🧹 Test record cleaned up'');\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking activity_type enum values...'');\n    \n    const [results] = await sequelize.query(\n      ''SELECT unnest(enum_range(NULL::enum_customer_activities_activity_type)) as activity_type;''\n    );\n    \n    console.log(''✅ Valid activity_type values:'');\n    results.forEach(row => console.log(''- '' + row.activity_type));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Testing customer activity with correct ENUM values...'');\n    \n    // Test each valid ENUM value\n    const testCases = [\n      { activity_type: ''page_view'', description: ''Page view test'' },\n      { activity_type: ''product_view'', description: ''Product view test'' },\n      { activity_type: ''add_to_cart'', description: ''Add to cart test'' },\n      { activity_type: ''remove_from_cart'', description: ''Remove from cart test'' },\n      { activity_type: ''search'', description: ''Search test'' },\n      { activity_type: ''order_completed'', description: ''Order completed test'' }\n    ];\n    \n    for (const testCase of testCases) {\n      try {\n        const [result] = await sequelize.query(\n          ''INSERT INTO customer_activities (session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (:session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n          {\n            replacements: {\n              session_id: ''test_'' + Date.now(),\n              store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n              activity_type: testCase.activity_type,\n              page_url: ''http://localhost:3000/test'',\n              referrer: '''',\n              user_agent: ''Test Script'',\n              metadata: JSON.stringify({ test: true, description: testCase.description })\n            },\n            type: sequelize.QueryTypes.INSERT\n          }\n        );\n        console.log(''✅'', testCase.activity_type, ''inserted with ID:'', result[0].id);\n      } catch (error) {\n        console.log(''❌'', testCase.activity_type, ''failed:'', error.message);\n      }\n    }\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n    console.log(''📊 Total customer activities:'', count[0].count);\n    \n    // Clean up test records\n    await sequelize.query(''DELETE FROM customer_activities WHERE user_agent = ''''Test Script'''';'');\n    console.log(''🧹 Test records cleaned up'');\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Testing customer activity with correct ENUM values...'');\n    \n    // Test one valid ENUM value first\n    const testData = {\n      session_id: ''test_'' + Date.now(),\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n      activity_type: ''add_to_cart'',\n      page_url: ''http://localhost:3000/test'',\n      referrer: '''',\n      user_agent: ''Test Script'',\n      metadata: JSON.stringify({ test: true, description: ''Add to cart test'' })\n    };\n    \n    const [result] = await sequelize.query(\n      ''INSERT INTO customer_activities (session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (:session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n      {\n        replacements: testData,\n        type: sequelize.QueryTypes.INSERT\n      }\n    );\n    console.log(''✅ add_to_cart test inserted with ID:'', result[0].id);\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n    console.log(''📊 Total customer activities:'', count[0].count);\n    \n    // Clean up test record\n    await sequelize.query(''DELETE FROM customer_activities WHERE id = :id'', {\n      replacements: { id: result[0].id }\n    });\n    console.log(''🧹 Test record cleaned up'');\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooluer.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d customer_activities\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking customer_activities table structure...'');\n    const [results] = await sequelize.query(''SELECT column_name, data_type, is_nullable, column_default FROM information_schema.columns WHERE table_name = ''''customer_activities'''' ORDER BY ordinal_position;'');\n    \n    console.log(''✅ customer_activities table structure:'');\n    results.forEach(col => console.log(''- '' + col.column_name + '': '' + col.data_type + '' '' + (col.is_nullable === ''NO'' ? ''NOT NULL'' : ''NULL'') + '' '' + (col.column_default || '''')));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking recent product imports...'');\n    const [results] = await sequelize.query(''SELECT COUNT(*) as total, store_id, MAX(updated_at) as latest_update FROM products GROUP BY store_id ORDER BY latest_update DESC;'');\n    \n    if (results.length === 0) {\n      console.log(''❌ No products found in database'');\n    } else {\n      console.log(''📊 Products by store:'');\n      results.forEach(row => console.log(`- Store $row.store_id: $row.total products (latest: $row.latest_update)`));\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\nconst { v4: uuidv4 } = require(''uuid'');\n(async () => {\n  try {\n    console.log(''🧪 Testing customer activity with generated UUID...'');\n    \n    const testData = {\n      id: uuidv4(),\n      session_id: ''test_'' + Date.now(),\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n      activity_type: ''add_to_cart'',\n      page_url: ''http://localhost:3000/test'',\n      referrer: '''',\n      user_agent: ''Test Script'',\n      metadata: JSON.stringify({ test: true, description: ''Add to cart test'' })\n    };\n    \n    const [result] = await sequelize.query(\n      ''INSERT INTO customer_activities (id, session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (:id, :session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n      {\n        replacements: testData,\n        type: sequelize.QueryTypes.INSERT\n      }\n    );\n    console.log(''✅ add_to_cart test inserted with ID:'', result[0].id);\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n    console.log(''📊 Total customer activities:'', count[0].count);\n    \n    // Clean up test record\n    await sequelize.query(''DELETE FROM customer_activities WHERE id = :id'', {\n      replacements: { id: result[0].id }\n    });\n    console.log(''🧹 Test record cleaned up'');\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Testing customer activity with PostgreSQL UUID generation...'');\n    \n    const testData = {\n      session_id: ''test_'' + Date.now(),\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n      activity_type: ''add_to_cart'',\n      page_url: ''http://localhost:3000/test'',\n      referrer: '''',\n      user_agent: ''Test Script'',\n      metadata: JSON.stringify({ test: true, description: ''Add to cart test'' })\n    };\n    \n    const [result] = await sequelize.query(\n      ''INSERT INTO customer_activities (id, session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (gen_random_uuid(), :session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n      {\n        replacements: testData,\n        type: sequelize.QueryTypes.INSERT\n      }\n    );\n    console.log(''✅ add_to_cart test inserted with ID:'', result[0].id);\n    \n    // Try another ENUM value\n    const testData2 = {\n      session_id: ''test_2_'' + Date.now(),\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n      activity_type: ''page_view'',\n      page_url: ''http://localhost:3000/test-page'',\n      referrer: '''',\n      user_agent: ''Test Script'',\n      metadata: JSON.stringify({ test: true, description: ''Page view test'' })\n    };\n    \n    const [result2] = await sequelize.query(\n      ''INSERT INTO customer_activities (id, session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (gen_random_uuid(), :session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n      {\n        replacements: testData2,\n        type: sequelize.QueryTypes.INSERT\n      }\n    );\n    console.log(''✅ page_view test inserted with ID:'', result2[0].id);\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n    console.log(''📊 Total customer activities:'', count[0].count);\n    \n    // Clean up test records\n    await sequelize.query(''DELETE FROM customer_activities WHERE user_agent = ''''Test Script'''';'');\n    console.log(''🧹 Test records cleaned up'');\n    \n    await sequelize.close();\n    console.log(''✅ Customer activity tracking is now working with correct ENUM values!'');\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Testing customer activity with PostgreSQL UUID generation...'');\n    \n    const testData = {\n      session_id: ''test_'' + Date.now(),\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n      activity_type: ''add_to_cart'',\n      page_url: ''http://localhost:3000/test'',\n      referrer: '''',\n      user_agent: ''Test Script'',\n      metadata: JSON.stringify({ test: true, description: ''Add to cart test'' })\n    };\n    \n    const [result] = await sequelize.query(\n      ''INSERT INTO customer_activities (id, session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (gen_random_uuid(), :session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n      {\n        replacements: testData,\n        type: sequelize.QueryTypes.INSERT\n      }\n    );\n    console.log(''✅ add_to_cart test inserted with ID:'', result[0].id);\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n    console.log(''📊 Total customer activities:'', count[0].count);\n    \n    // Clean up test record\n    await sequelize.query(''DELETE FROM customer_activities WHERE user_agent = :user_agent'', {\n      replacements: { user_agent: ''Test Script'' }\n    });\n    console.log(''🧹 Test record cleaned up'');\n    \n    await sequelize.close();\n    console.log(''✅ Customer activity tracking is now working with correct ENUM values!'');\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking integration configs for Akeneo credentials...'');\n    const [results] = await sequelize.query(''SELECT store_id, integration_type, base_url, username FROM integration_configs WHERE integration_type = \\''akeneo\\'' LIMIT 5;'');\n    \n    if (results.length === 0) {\n      console.log(''❌ No Akeneo integration configs found'');\n      \n      // Check what integration types exist\n      const [types] = await sequelize.query(''SELECT DISTINCT integration_type, COUNT(*) as count FROM integration_configs GROUP BY integration_type;'');\n      console.log(''📊 Available integration types:'');\n      types.forEach(type => console.log(''- '' + type.integration_type + '': '' + type.count + '' configs''));\n    } else {\n      console.log(''✅ Found Akeneo configurations:'');\n      results.forEach(config => {\n        console.log(''- Store: '' + config.store_id);\n        console.log(''  URL: '' + config.base_url);\n        console.log(''  Username: '' + config.username);\n      });\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking integration configs table structure...'');\n    const [results] = await sequelize.query(''SELECT column_name FROM information_schema.columns WHERE table_name = \\''integration_configs\\'' ORDER BY ordinal_position;'');\n    \n    console.log(''📋 Available columns:'');\n    results.forEach(col => console.log(''- '' + col.column_name));\n    \n    // Now check actual data\n    const [configs] = await sequelize.query(''SELECT * FROM integration_configs WHERE integration_type = \\''akeneo\\'' LIMIT 1;'');\n    if (configs.length > 0) {\n      console.log(''✅ Sample Akeneo config found:'');\n      console.log(''Keys:'', Object.keys(configs[0]));\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node debug-products-uuid.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Creating test customer activity records...'');\n    \n    // Create multiple test records\n    const testCases = [\n      { activity_type: ''page_view'', description: ''Homepage view'' },\n      { activity_type: ''product_view'', description: ''Product page view'' }, \n      { activity_type: ''add_to_cart'', description: ''Added item to cart'' },\n      { activity_type: ''search'', description: ''Searched for products'' }\n    ];\n    \n    const insertedIds = [];\n    \n    for (const testCase of testCases) {\n      const [result] = await sequelize.query(\n        ''INSERT INTO customer_activities (id, session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (gen_random_uuid(), :session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n        {\n          replacements: {\n            session_id: ''admin_test_'' + Date.now(),\n            store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n            activity_type: testCase.activity_type,\n            page_url: ''http://localhost:3000/'' + testCase.activity_type.replace(''_'', ''-''),\n            referrer: ''http://localhost:3000'',\n            user_agent: ''Admin Test Browser'',\n            metadata: JSON.stringify({ test: true, description: testCase.description, created_for: ''admin_dashboard_test'' })\n          },\n          type: sequelize.QueryTypes.INSERT\n        }\n      );\n      insertedIds.push(result[0].id);\n      console.log(''✅'', testCase.activity_type, ''test record created with ID:'', result[0].id);\n    }\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities WHERE store_id = ''''157d4590-49bf-4b0b-bd77-abe131909528'''';'');\n    console.log(''📊 Total customer activities for store:'', count[0].count);\n    \n    console.log(''🎯 Test records created. These will remain in the database for testing the admin dashboard.'');\n    console.log(''📋 Test record IDs:'', insertedIds);\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Creating test customer activity records...'');\n    \n    // Create multiple test records\n    const testCases = [\n      { activity_type: ''page_view'', description: ''Homepage view'' },\n      { activity_type: ''product_view'', description: ''Product page view'' }, \n      { activity_type: ''add_to_cart'', description: ''Added item to cart'' },\n      { activity_type: ''search'', description: ''Searched for products'' }\n    ];\n    \n    const insertedIds = [];\n    \n    for (const testCase of testCases) {\n      const [result] = await sequelize.query(\n        ''INSERT INTO customer_activities (id, session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (gen_random_uuid(), :session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n        {\n          replacements: {\n            session_id: ''admin_test_'' + Date.now(),\n            store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n            activity_type: testCase.activity_type,\n            page_url: ''http://localhost:3000/'' + testCase.activity_type.replace(''_'', ''-''),\n            referrer: ''http://localhost:3000'',\n            user_agent: ''Admin Test Browser'',\n            metadata: JSON.stringify({ test: true, description: testCase.description, created_for: ''admin_dashboard_test'' })\n          },\n          type: sequelize.QueryTypes.INSERT\n        }\n      );\n      insertedIds.push(result[0].id);\n      console.log(''✅'', testCase.activity_type, ''test record created with ID:'', result[0].id);\n    }\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities WHERE store_id = :store_id'', {\n      replacements: { store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'' }\n    });\n    console.log(''📊 Total customer activities for store:'', count[0].count);\n    \n    console.log(''🎯 Test records created. These will remain in the database for testing the admin dashboard.'');\n    console.log(''📋 Test record IDs:'', insertedIds);\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node debug-akeneo-422.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Testing direct API simulation...'');\n    \n    // Simulate what the frontend would send\n    const testData = {\n      session_id: ''frontend_test_'' + Date.now(),\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n      activity_type: ''page_view'',\n      page_url: ''http://localhost:3000/test-frontend'',\n      referrer: '''',\n      user_agent: ''Frontend Test'',\n      metadata: { test: true, source: ''frontend_simulation'' }\n    };\n    \n    // Test direct database insert with exact same format as API\n    const { CustomerActivity } = require(''./backend/src/models'');\n    \n    const activity = await CustomerActivity.create({\n      session_id: testData.session_id,\n      store_id: testData.store_id,\n      user_id: null,\n      activity_type: testData.activity_type,\n      page_url: testData.page_url,\n      referrer: testData.referrer,\n      product_id: null,\n      search_query: null,\n      user_agent: testData.user_agent,\n      ip_address: ''127.0.0.1'',\n      metadata: testData.metadata || {}\n    });\n    \n    console.log(''✅ Direct database insert successful:'', activity.id);\n    \n    // Verify the record was created\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities WHERE session_id = :session_id'', {\n      replacements: { session_id: testData.session_id }\n    });\n    console.log(''📊 Records with test session_id:'', count[0].count);\n    \n    // Clean up test record\n    await sequelize.query(''DELETE FROM customer_activities WHERE session_id = :session_id'', {\n      replacements: { session_id: testData.session_id }\n    });\n    console.log(''🧹 Test record cleaned up'');\n    \n    await sequelize.close();\n    console.log(''✅ Database test completed - CustomerActivity model is working correctly'');\n  } catch (error) {\n    console.error(''❌ Database test failed:'', error.message);\n    console.error(''Stack:'', error.stack);\n  }\n})();\")",
      "Bash(start test-tracking.html)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking Akeneo integration config structure...'');\n    const [results] = await sequelize.query(''SELECT id, store_id, config_data FROM integration_configs WHERE integration_type = \\''akeneo\\'' AND is_active = true LIMIT 1;'');\n    \n    if (results.length === 0) {\n      console.log(''❌ No active Akeneo integration found'');\n    } else {\n      const config = results[0];\n      console.log(''✅ Found Akeneo config:'');\n      console.log(''Store ID:'', config.store_id);\n      console.log(''Config keys:'', Object.keys(config.config_data));\n      console.log(''Base URL:'', config.config_data.baseUrl);\n      console.log(''Username:'', config.config_data.username);\n      console.log(''Client ID present:'', !!config.config_data.clientId);\n      console.log(''Client Secret present:'', !!config.config_data.clientSecret);\n      console.log(''Password present:'', !!config.config_data.password);\n      \n      // Check if credentials are properly formatted\n      if (!config.config_data.clientId) {\n        console.log(''❌ Missing clientId field'');\n      }\n      if (!config.config_data.clientSecret) {\n        console.log(''❌ Missing clientSecret field'');\n      }\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking Akeneo integration config structure...'');\n    const [results] = await sequelize.query(''SELECT id, store_id, config_data FROM integration_configs WHERE integration_type = \\''akeneo\\'' AND is_active = true LIMIT 1;'');\n    \n    if (results.length === 0) {\n      console.log(''❌ No active Akeneo integration found'');\n    } else {\n      const config = results[0];\n      console.log(''✅ Found Akeneo config:'');\n      console.log(''Store ID:'', config.store_id);\n      console.log(''Config keys:'', Object.keys(config.config_data));\n      console.log(''Base URL:'', config.config_data.baseUrl);\n      console.log(''Username:'', config.config_data.username);\n      console.log(''Client ID present:'', Boolean(config.config_data.clientId));\n      console.log(''Client Secret present:'', Boolean(config.config_data.clientSecret));\n      console.log(''Password present:'', Boolean(config.config_data.password));\n      \n      // Check if credentials are properly formatted\n      if (!config.config_data.clientId) {\n        console.log(''❌ Missing clientId field'');\n      }\n      if (!config.config_data.clientSecret) {\n        console.log(''❌ Missing clientSecret field'');\n      }\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-akeneo-config.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node verify-akeneo-credentials.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Testing product import configuration loading...'');\n    \n    // Simulate the exact path that product import takes\n    const IntegrationConfig = require(''./src/models/IntegrationConfig.js'');\n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    \n    console.log(''📋 Step 1: Finding integration config...'');\n    const integrationConfig = await IntegrationConfig.findByStoreAndType(storeId, ''akeneo'');\n    \n    if (integrationConfig && integrationConfig.config_data) {\n      console.log(''✅ Found config via IntegrationConfig.findByStoreAndType:'');\n      console.log(''  Client ID:'', integrationConfig.config_data.clientId);\n      console.log(''  Secret Length:'', integrationConfig.config_data.clientSecret?.length);\n      console.log(''  Base URL:'', integrationConfig.config_data.baseUrl);\n      console.log(''  Username:'', integrationConfig.config_data.username);\n    } else {\n      console.log(''❌ No config found via findByStoreAndType'');\n    }\n    \n    // Also test the raw SQL query to see if there''s a difference\n    console.log(''\\n📋 Step 2: Testing raw SQL query...'');\n    const [rawResults] = await sequelize.query(''SELECT config_data FROM integration_configs WHERE store_id = :storeId AND integration_type = :type AND is_active = true'', {\n      replacements: { storeId, type: ''akeneo'' }\n    });\n    \n    if (rawResults.length > 0) {\n      console.log(''✅ Found config via raw SQL:'');\n      console.log(''  Client ID:'', rawResults[0].config_data.clientId);\n      console.log(''  Secret Length:'', rawResults[0].config_data.clientSecret?.length);\n      console.log(''  Base URL:'', rawResults[0].config_data.baseUrl);\n    } else {\n      console.log(''❌ No config found via raw SQL'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\nconst crypto = require(''crypto'');\n\n(async () => {\n  try {\n    console.log(''🔍 Testing decryption process...'');\n    \n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    \n    // Get raw encrypted data\n    const [rawResults] = await sequelize.query(''SELECT config_data FROM integration_configs WHERE store_id = :storeId AND integration_type = :type AND is_active = true'', {\n      replacements: { storeId, type: ''akeneo'' }\n    });\n    \n    if (rawResults.length === 0) {\n      console.log(''❌ No config found'');\n      return;\n    }\n    \n    const rawConfig = rawResults[0].config_data;\n    console.log(''📋 Raw encrypted clientSecret length:'', rawConfig.clientSecret?.length);\n    console.log(''📋 Raw encrypted clientSecret starts with:'', rawConfig.clientSecret?.substring(0, 20) + ''...'');\n    \n    // Test manual decryption\n    const key = process.env.INTEGRATION_ENCRYPTION_KEY || ''catalyst-integration-default-key-change-in-production'';\n    \n    if (rawConfig.clientSecret?.startsWith(''encrypted:'')) {\n      console.log(''✅ clientSecret is properly encrypted'');\n      \n      try {\n        const encryptedValue = rawConfig.clientSecret.replace(''encrypted:'', '''');\n        console.log(''📋 Encrypted value length:'', encryptedValue.length);\n        \n        const decipher = crypto.createDecipher(''aes-256-cbc'', key);\n        let decryptedValue = decipher.update(encryptedValue, ''hex'', ''utf8'');\n        decryptedValue += decipher.final(''utf8'');\n        \n        console.log(''✅ Manual decryption successful'');\n        console.log(''📋 Decrypted clientSecret length:'', decryptedValue.length);\n        console.log(''📋 Decrypted clientSecret first 20 chars:'', decryptedValue.substring(0, 20) + ''...'');\n        \n      } catch (decryptError) {\n        console.log(''❌ Manual decryption failed:'', decryptError.message);\n      }\n    } else {\n      console.log(''❌ clientSecret is not encrypted or improperly formatted'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\nconst crypto = require(''crypto'');\n\n(async () => {\n  try {\n    console.log(''🔍 Testing double decryption...'');\n    \n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    \n    // Get raw encrypted data\n    const [rawResults] = await sequelize.query(''SELECT config_data FROM integration_configs WHERE store_id = :storeId AND integration_type = :type AND is_active = true'', {\n      replacements: { storeId, type: ''akeneo'' }\n    });\n    \n    const rawConfig = rawResults[0].config_data;\n    const key = process.env.INTEGRATION_ENCRYPTION_KEY || ''catalyst-integration-default-key-change-in-production'';\n    \n    // First decryption\n    const encryptedValue1 = rawConfig.clientSecret.replace(''encrypted:'', '''');\n    const decipher1 = crypto.createDecipher(''aes-256-cbc'', key);\n    let decryptedValue1 = decipher1.update(encryptedValue1, ''hex'', ''utf8'');\n    decryptedValue1 += decipher1.final(''utf8'');\n    \n    console.log(''📋 After first decryption:'');\n    console.log(''  Length:'', decryptedValue1.length);\n    console.log(''  Value:'', decryptedValue1.substring(0, 30) + ''...'');\n    \n    // Second decryption (if still encrypted)\n    if (decryptedValue1.startsWith(''encrypted:'')) {\n      console.log(''🔄 Performing second decryption...'');\n      const encryptedValue2 = decryptedValue1.replace(''encrypted:'', '''');\n      const decipher2 = crypto.createDecipher(''aes-256-cbc'', key);\n      let decryptedValue2 = decipher2.update(encryptedValue2, ''hex'', ''utf8'');\n      decryptedValue2 += decipher2.final(''utf8'');\n      \n      console.log(''📋 After second decryption:'');\n      console.log(''  Length:'', decryptedValue2.length);\n      console.log(''  Value (first 20 chars):'', decryptedValue2.substring(0, 20) + ''...'');\n      console.log(''  Value (last 20 chars):'', ''...'' + decryptedValue2.substring(decryptedValue2.length - 20));\n      \n      // Test if this looks like a valid client secret\n      if (decryptedValue2.length > 50 && !decryptedValue2.startsWith(''encrypted:'')) {\n        console.log(''✅ This looks like the actual client secret!'');\n      }\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")"
    ],
    "deny": []
  }
}