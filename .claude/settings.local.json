{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(npm install:*)",
      "Bash(npm run dev:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(npm run build:*)",
      "Bash(vercel:*)",
      "Bash(curl:*)",
      "Bash(npm run lint)",
      "Bash(npm run lint:*)",
      "Bash(ls:*)",
      "WebFetch(domain:catalyst-backend-fzhu.onrender.com)",
      "Bash(node:*)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node debug-email-chars.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node debug-constraints.js)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -f cleanup-duplicate-tables.sql)",
      "Bash(grep:*)",
      "Bash(for file in AttributeSet.js Coupon.js DeliverySettings.js OrderItem.js ShippingMethod.js Tax.js)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(tail:*)",
      "Bash(done)",
      "Bash(mv:*)",
      "Bash(true)",
      "Bash(find:*)",
      "Bash(npm run migrate:*)",
      "Bash(cd backend)",
      "Bash(git revert:*)",
      "WebFetch(domain:catalyst-pearl.vercel.app)",
      "Bash(sed:*)",
      "Bash(git checkout:*)",
      "Bash(for:*)",
      "Bash(do echo \"Cleaning $file\")",
      "Bash(rm:*)",
      "Bash(npm run test:*)",
      "Bash(npm start)",
      "Bash(pkill:*)",
      "Bash(rg:*)",
      "Bash(npm run sync:tables:*)",
      "Bash(npm run db:query:*)",
      "Bash(npx sequelize-cli:*)",
      "Bash(taskkill:*)",
      "WebFetch(domain:localhost)",
      "Bash(do echo \"Updating $file...\")",
      "Bash(git deploy:*)",
      "Bash(npm run:*)",
      "WebFetch(domain:api.akeneo.com)",
      "Bash(timeout 5 npm start)",
      "Bash(timeout 5 npm start)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection'');\n(async () => {\n  try {\n    const [results] = await sequelize.query(''SELECT column_name, data_type FROM information_schema.columns WHERE table_name = \\''integration_configs\\'' ORDER BY ordinal_position;'');\n    console.log(''Current integration_configs table structure:'');\n    results.forEach(row => console.log(\\`- ${row.column_name}: ${row.data_type}\\`));\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await sequelize.close();\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d integration_configs\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -f add-integration-columns.sql)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node migrate-integration-table.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-imported-categories.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    const [results] = await sequelize.query(''SELECT COUNT(*) as total, store_id FROM attributes GROUP BY store_id;'');\n    console.log(''Attributes count by store:'');\n    results.forEach(row => console.log(\\`Store ${row.store_id}: ${row.total} attributes\\`));\n    \n    const [sample] = await sequelize.query(''SELECT name, code, type, store_id FROM attributes LIMIT 15;'');\n    console.log(''\\nSample attributes:'');\n    sample.forEach(attr => console.log(\\`- ${attr.name} (${attr.code}) - ${attr.type} - Store: ${attr.store_id}\\`));\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await sequelize.close();\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-attributes.js)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"SELECT COUNT(*) as total_attributes FROM attributes WHERE store_id = ''157d4590-49bf-4b0b-bd77-abe131909528'';\")",
      "Bash(git restore:*)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node run-akeneo-schedules-migration.js)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d akeneo_schedules\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node verify-akeneo-schedules.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    const [results] = await sequelize.query(''SELECT id, name, parent_id, level FROM categories WHERE name ILIKE \\''%welhof%\\'' ORDER BY name;'');\n    console.log(''Current Welhof categories:'');\n    results.forEach(cat => console.log(\\`- ${cat.name} (ID: ${cat.id}) - Parent: ${cat.parent_id || ''null''} - Level: ${cat.level}\\`));\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await sequelize.close();\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    const [results] = await sequelize.query(''SELECT id, name, parent_id, level FROM categories WHERE name ILIKE \\''%welhof%\\'' ORDER BY name;'');\n    console.log(''Current Welhof categories:'');\n    results.forEach(cat => console.log(\\`- ${cat.name} (ID: ${cat.id}) - Parent: ${cat.parent_id || \\''null\\''} - Level: ${cat.level}\\`));\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await sequelize.close();\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node fix-welhof-categories.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node fix-welhof-categories.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-all-categories.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node clear-and-create-root-category.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node recreate-categories-table.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking current localStorage contents...'');\n    // This won''t work in Node.js, let me check the backend auth middleware instead\n    \n    const [results] = await sequelize.query(''SELECT * FROM redirects ORDER BY created_at DESC LIMIT 10;'');\n    console.log(''📋 Recent redirects in database:'');\n    results.forEach(redirect => console.log(`- $redirect.old_url → $redirect.new_url ($redirect.created_at)`));\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await sequelize.close();\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"SELECT * FROM redirects ORDER BY created_at DESC LIMIT 5;\")",
      "Bash(NODE_ENV=production node -e \"\nconst path = require(''path'');\nprocess.chdir(''./backend'');\nrequire(''dotenv'').config({ path: ''.env.local'' });\nconsole.log(''JWT_SECRET exists:'', Boolean(process.env.JWT_SECRET));\nconsole.log(''JWT_SECRET value:'', process.env.JWT_SECRET);\nconsole.log(''NODE_ENV:'', process.env.NODE_ENV);\n\")",
      "Bash(npm run:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d redirects\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-redirects-table.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-redirects-table.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking redirects table structure...'');\n    const [results] = await sequelize.query(''SELECT column_name, data_type FROM information_schema.columns WHERE table_name = \\''redirects\\'' ORDER BY ordinal_position;'');\n    \n    if (results.length === 0) {\n      console.log(''❌ Redirects table does not exist!'');\n    } else {\n      console.log(''✅ Redirects table columns:'');\n      results.forEach(col => console.log(''- '' + col.column_name + '': '' + col.data_type));\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking all redirects table columns...'');\n    const [results] = await sequelize.query(''SELECT column_name, data_type, is_nullable, column_default FROM information_schema.columns WHERE table_name = \\''redirects\\'' ORDER BY ordinal_position;'');\n    \n    console.log(''📋 Full redirects table structure:'');\n    results.forEach(col => {\n      console.log(''- '' + col.column_name + '': '' + col.data_type + '' '' + (col.is_nullable === ''NO'' ? ''NOT NULL'' : ''NULL'') + '' '' + (col.column_default || ''''));\n    });\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -f fix-redirects-table.sql)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔧 Adding missing columns to redirects table...'');\n    \n    await sequelize.query(\\`\n      ALTER TABLE redirects \n      ADD COLUMN IF NOT EXISTS entity_type VARCHAR(50),\n      ADD COLUMN IF NOT EXISTS entity_id UUID,\n      ADD COLUMN IF NOT EXISTS created_by UUID,\n      ADD COLUMN IF NOT EXISTS notes TEXT,\n      ADD COLUMN IF NOT EXISTS hit_count INTEGER DEFAULT 0,\n      ADD COLUMN IF NOT EXISTS last_used_at TIMESTAMP;\n    \\`);\n    \n    console.log(''✅ Successfully added missing columns'');\n    \n    // Verify the new structure\n    const [results] = await sequelize.query(''SELECT column_name FROM information_schema.columns WHERE table_name = \\''redirects\\'' ORDER BY ordinal_position;'');\n    console.log(''📋 Updated table columns:'');\n    results.forEach(col => console.log(''- '' + col.column_name));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔧 Adding missing columns to redirects table...'');\n    \n    const sql = ''ALTER TABLE redirects ADD COLUMN IF NOT EXISTS entity_type VARCHAR(50), ADD COLUMN IF NOT EXISTS entity_id UUID, ADD COLUMN IF NOT EXISTS created_by UUID, ADD COLUMN IF NOT EXISTS notes TEXT, ADD COLUMN IF NOT EXISTS hit_count INTEGER DEFAULT 0, ADD COLUMN IF NOT EXISTS last_used_at TIMESTAMP;'';\n    \n    await sequelize.query(sql);\n    \n    console.log(''✅ Successfully added missing columns'');\n    \n    // Verify the new structure\n    const [results] = await sequelize.query(''SELECT column_name FROM information_schema.columns WHERE table_name = \\''redirects\\'' ORDER BY ordinal_position;'');\n    console.log(''📋 Updated table columns:'');\n    results.forEach(col => console.log(''- '' + col.column_name));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(git reset:*)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    const [results] = await sequelize.query(''SELECT id, title, slug, store_id FROM cms_pages WHERE slug LIKE \\''%404%\\'' ORDER BY slug;'');\n    console.log(''📋 Existing 404 pages:'');\n    results.forEach(page => console.log(\\`- ${page.slug} (${page.title}) - Store: ${page.store_id}\\`));\n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(git rm:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d customer_activities\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking customer_activities table...'');\n    const [results] = await sequelize.query(''SELECT column_name, data_type FROM information_schema.columns WHERE table_name = \\''customer_activities\\'' ORDER BY ordinal_position;'');\n    \n    if (results.length === 0) {\n      console.log(''❌ customer_activities table does not exist!'');\n      \n      // Check what tables do exist\n      const [tables] = await sequelize.query(''SELECT table_name FROM information_schema.tables WHERE table_schema = \\''public\\'' AND table_name LIKE \\''%activity%\\'' OR table_name LIKE \\''%customer%\\'';'');\n      console.log(''📋 Related tables found:'');\n      tables.forEach(table => console.log(''- '' + table.table_name));\n    } else {\n      console.log(''✅ customer_activities table structure:'');\n      results.forEach(col => console.log(''- '' + col.column_name + '': '' + col.data_type));\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking customer_activities records...'');\n    const [results] = await sequelize.query(''SELECT COUNT(*) as total, activity_type, MAX(created_at) as latest FROM customer_activities GROUP BY activity_type ORDER BY total DESC;'');\n    \n    if (results.length === 0) {\n      console.log(''❌ No customer activities found in database'');\n      \n      // Check total count\n      const [total] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n      console.log(''📊 Total records in customer_activities table:'', total[0].count);\n    } else {\n      console.log(''📊 Customer activities summary:'');\n      results.forEach(row => console.log(\\`- ${row.activity_type}: ${row.total} records (latest: ${row.latest})\\`));\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking customer_activities records...'');\n    const [total] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n    console.log(''📊 Total records in customer_activities table:'', total[0].count);\n    \n    if (total[0].count > 0) {\n      const [results] = await sequelize.query(''SELECT activity_type, COUNT(*) as total, MAX(created_at) as latest FROM customer_activities GROUP BY activity_type ORDER BY total DESC LIMIT 10;'');\n      console.log(''📊 Customer activities by type:'');\n      results.forEach(row => console.log(''- '' + row.activity_type + '': '' + row.total + '' records (latest: '' + row.latest + '')''));\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-tracking.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-tracking.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Testing direct database insert...'');\n    \n    // Test direct SQL insert\n    const testData = {\n      session_id: ''test_session_'' + Date.now(),\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n      activity_type: ''test_tracking'',\n      page_url: ''http://localhost:3000/test'',\n      referrer: '''',\n      user_agent: ''Test Script'',\n      metadata: JSON.stringify({ test: true, timestamp: new Date().toISOString() })\n    };\n    \n    const [result] = await sequelize.query(\n      ''INSERT INTO customer_activities (session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (:session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n      {\n        replacements: testData,\n        type: sequelize.QueryTypes.INSERT\n      }\n    );\n    \n    console.log(''✅ Test record inserted with ID:'', result[0].id);\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n    console.log(''📊 Total records:'', count[0].count);\n    \n    // Clean up test record\n    await sequelize.query(''DELETE FROM customer_activities WHERE id = :id'', {\n      replacements: { id: result[0].id }\n    });\n    console.log(''🧹 Test record cleaned up'');\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking activity_type enum values...'');\n    \n    const [results] = await sequelize.query(\n      ''SELECT unnest(enum_range(NULL::enum_customer_activities_activity_type)) as activity_type;''\n    );\n    \n    console.log(''✅ Valid activity_type values:'');\n    results.forEach(row => console.log(''- '' + row.activity_type));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Testing customer activity with correct ENUM values...'');\n    \n    // Test each valid ENUM value\n    const testCases = [\n      { activity_type: ''page_view'', description: ''Page view test'' },\n      { activity_type: ''product_view'', description: ''Product view test'' },\n      { activity_type: ''add_to_cart'', description: ''Add to cart test'' },\n      { activity_type: ''remove_from_cart'', description: ''Remove from cart test'' },\n      { activity_type: ''search'', description: ''Search test'' },\n      { activity_type: ''order_completed'', description: ''Order completed test'' }\n    ];\n    \n    for (const testCase of testCases) {\n      try {\n        const [result] = await sequelize.query(\n          ''INSERT INTO customer_activities (session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (:session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n          {\n            replacements: {\n              session_id: ''test_'' + Date.now(),\n              store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n              activity_type: testCase.activity_type,\n              page_url: ''http://localhost:3000/test'',\n              referrer: '''',\n              user_agent: ''Test Script'',\n              metadata: JSON.stringify({ test: true, description: testCase.description })\n            },\n            type: sequelize.QueryTypes.INSERT\n          }\n        );\n        console.log(''✅'', testCase.activity_type, ''inserted with ID:'', result[0].id);\n      } catch (error) {\n        console.log(''❌'', testCase.activity_type, ''failed:'', error.message);\n      }\n    }\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n    console.log(''📊 Total customer activities:'', count[0].count);\n    \n    // Clean up test records\n    await sequelize.query(''DELETE FROM customer_activities WHERE user_agent = ''''Test Script'''';'');\n    console.log(''🧹 Test records cleaned up'');\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Testing customer activity with correct ENUM values...'');\n    \n    // Test one valid ENUM value first\n    const testData = {\n      session_id: ''test_'' + Date.now(),\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n      activity_type: ''add_to_cart'',\n      page_url: ''http://localhost:3000/test'',\n      referrer: '''',\n      user_agent: ''Test Script'',\n      metadata: JSON.stringify({ test: true, description: ''Add to cart test'' })\n    };\n    \n    const [result] = await sequelize.query(\n      ''INSERT INTO customer_activities (session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (:session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n      {\n        replacements: testData,\n        type: sequelize.QueryTypes.INSERT\n      }\n    );\n    console.log(''✅ add_to_cart test inserted with ID:'', result[0].id);\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n    console.log(''📊 Total customer activities:'', count[0].count);\n    \n    // Clean up test record\n    await sequelize.query(''DELETE FROM customer_activities WHERE id = :id'', {\n      replacements: { id: result[0].id }\n    });\n    console.log(''🧹 Test record cleaned up'');\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooluer.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d customer_activities\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking customer_activities table structure...'');\n    const [results] = await sequelize.query(''SELECT column_name, data_type, is_nullable, column_default FROM information_schema.columns WHERE table_name = ''''customer_activities'''' ORDER BY ordinal_position;'');\n    \n    console.log(''✅ customer_activities table structure:'');\n    results.forEach(col => console.log(''- '' + col.column_name + '': '' + col.data_type + '' '' + (col.is_nullable === ''NO'' ? ''NOT NULL'' : ''NULL'') + '' '' + (col.column_default || '''')));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking recent product imports...'');\n    const [results] = await sequelize.query(''SELECT COUNT(*) as total, store_id, MAX(updated_at) as latest_update FROM products GROUP BY store_id ORDER BY latest_update DESC;'');\n    \n    if (results.length === 0) {\n      console.log(''❌ No products found in database'');\n    } else {\n      console.log(''📊 Products by store:'');\n      results.forEach(row => console.log(`- Store $row.store_id: $row.total products (latest: $row.latest_update)`));\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\nconst { v4: uuidv4 } = require(''uuid'');\n(async () => {\n  try {\n    console.log(''🧪 Testing customer activity with generated UUID...'');\n    \n    const testData = {\n      id: uuidv4(),\n      session_id: ''test_'' + Date.now(),\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n      activity_type: ''add_to_cart'',\n      page_url: ''http://localhost:3000/test'',\n      referrer: '''',\n      user_agent: ''Test Script'',\n      metadata: JSON.stringify({ test: true, description: ''Add to cart test'' })\n    };\n    \n    const [result] = await sequelize.query(\n      ''INSERT INTO customer_activities (id, session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (:id, :session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n      {\n        replacements: testData,\n        type: sequelize.QueryTypes.INSERT\n      }\n    );\n    console.log(''✅ add_to_cart test inserted with ID:'', result[0].id);\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n    console.log(''📊 Total customer activities:'', count[0].count);\n    \n    // Clean up test record\n    await sequelize.query(''DELETE FROM customer_activities WHERE id = :id'', {\n      replacements: { id: result[0].id }\n    });\n    console.log(''🧹 Test record cleaned up'');\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Testing customer activity with PostgreSQL UUID generation...'');\n    \n    const testData = {\n      session_id: ''test_'' + Date.now(),\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n      activity_type: ''add_to_cart'',\n      page_url: ''http://localhost:3000/test'',\n      referrer: '''',\n      user_agent: ''Test Script'',\n      metadata: JSON.stringify({ test: true, description: ''Add to cart test'' })\n    };\n    \n    const [result] = await sequelize.query(\n      ''INSERT INTO customer_activities (id, session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (gen_random_uuid(), :session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n      {\n        replacements: testData,\n        type: sequelize.QueryTypes.INSERT\n      }\n    );\n    console.log(''✅ add_to_cart test inserted with ID:'', result[0].id);\n    \n    // Try another ENUM value\n    const testData2 = {\n      session_id: ''test_2_'' + Date.now(),\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n      activity_type: ''page_view'',\n      page_url: ''http://localhost:3000/test-page'',\n      referrer: '''',\n      user_agent: ''Test Script'',\n      metadata: JSON.stringify({ test: true, description: ''Page view test'' })\n    };\n    \n    const [result2] = await sequelize.query(\n      ''INSERT INTO customer_activities (id, session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (gen_random_uuid(), :session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n      {\n        replacements: testData2,\n        type: sequelize.QueryTypes.INSERT\n      }\n    );\n    console.log(''✅ page_view test inserted with ID:'', result2[0].id);\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n    console.log(''📊 Total customer activities:'', count[0].count);\n    \n    // Clean up test records\n    await sequelize.query(''DELETE FROM customer_activities WHERE user_agent = ''''Test Script'''';'');\n    console.log(''🧹 Test records cleaned up'');\n    \n    await sequelize.close();\n    console.log(''✅ Customer activity tracking is now working with correct ENUM values!'');\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Testing customer activity with PostgreSQL UUID generation...'');\n    \n    const testData = {\n      session_id: ''test_'' + Date.now(),\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n      activity_type: ''add_to_cart'',\n      page_url: ''http://localhost:3000/test'',\n      referrer: '''',\n      user_agent: ''Test Script'',\n      metadata: JSON.stringify({ test: true, description: ''Add to cart test'' })\n    };\n    \n    const [result] = await sequelize.query(\n      ''INSERT INTO customer_activities (id, session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (gen_random_uuid(), :session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n      {\n        replacements: testData,\n        type: sequelize.QueryTypes.INSERT\n      }\n    );\n    console.log(''✅ add_to_cart test inserted with ID:'', result[0].id);\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities;'');\n    console.log(''📊 Total customer activities:'', count[0].count);\n    \n    // Clean up test record\n    await sequelize.query(''DELETE FROM customer_activities WHERE user_agent = :user_agent'', {\n      replacements: { user_agent: ''Test Script'' }\n    });\n    console.log(''🧹 Test record cleaned up'');\n    \n    await sequelize.close();\n    console.log(''✅ Customer activity tracking is now working with correct ENUM values!'');\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking integration configs for Akeneo credentials...'');\n    const [results] = await sequelize.query(''SELECT store_id, integration_type, base_url, username FROM integration_configs WHERE integration_type = \\''akeneo\\'' LIMIT 5;'');\n    \n    if (results.length === 0) {\n      console.log(''❌ No Akeneo integration configs found'');\n      \n      // Check what integration types exist\n      const [types] = await sequelize.query(''SELECT DISTINCT integration_type, COUNT(*) as count FROM integration_configs GROUP BY integration_type;'');\n      console.log(''📊 Available integration types:'');\n      types.forEach(type => console.log(''- '' + type.integration_type + '': '' + type.count + '' configs''));\n    } else {\n      console.log(''✅ Found Akeneo configurations:'');\n      results.forEach(config => {\n        console.log(''- Store: '' + config.store_id);\n        console.log(''  URL: '' + config.base_url);\n        console.log(''  Username: '' + config.username);\n      });\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking integration configs table structure...'');\n    const [results] = await sequelize.query(''SELECT column_name FROM information_schema.columns WHERE table_name = \\''integration_configs\\'' ORDER BY ordinal_position;'');\n    \n    console.log(''📋 Available columns:'');\n    results.forEach(col => console.log(''- '' + col.column_name));\n    \n    // Now check actual data\n    const [configs] = await sequelize.query(''SELECT * FROM integration_configs WHERE integration_type = \\''akeneo\\'' LIMIT 1;'');\n    if (configs.length > 0) {\n      console.log(''✅ Sample Akeneo config found:'');\n      console.log(''Keys:'', Object.keys(configs[0]));\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node debug-products-uuid.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Creating test customer activity records...'');\n    \n    // Create multiple test records\n    const testCases = [\n      { activity_type: ''page_view'', description: ''Homepage view'' },\n      { activity_type: ''product_view'', description: ''Product page view'' }, \n      { activity_type: ''add_to_cart'', description: ''Added item to cart'' },\n      { activity_type: ''search'', description: ''Searched for products'' }\n    ];\n    \n    const insertedIds = [];\n    \n    for (const testCase of testCases) {\n      const [result] = await sequelize.query(\n        ''INSERT INTO customer_activities (id, session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (gen_random_uuid(), :session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n        {\n          replacements: {\n            session_id: ''admin_test_'' + Date.now(),\n            store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n            activity_type: testCase.activity_type,\n            page_url: ''http://localhost:3000/'' + testCase.activity_type.replace(''_'', ''-''),\n            referrer: ''http://localhost:3000'',\n            user_agent: ''Admin Test Browser'',\n            metadata: JSON.stringify({ test: true, description: testCase.description, created_for: ''admin_dashboard_test'' })\n          },\n          type: sequelize.QueryTypes.INSERT\n        }\n      );\n      insertedIds.push(result[0].id);\n      console.log(''✅'', testCase.activity_type, ''test record created with ID:'', result[0].id);\n    }\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities WHERE store_id = ''''157d4590-49bf-4b0b-bd77-abe131909528'''';'');\n    console.log(''📊 Total customer activities for store:'', count[0].count);\n    \n    console.log(''🎯 Test records created. These will remain in the database for testing the admin dashboard.'');\n    console.log(''📋 Test record IDs:'', insertedIds);\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Creating test customer activity records...'');\n    \n    // Create multiple test records\n    const testCases = [\n      { activity_type: ''page_view'', description: ''Homepage view'' },\n      { activity_type: ''product_view'', description: ''Product page view'' }, \n      { activity_type: ''add_to_cart'', description: ''Added item to cart'' },\n      { activity_type: ''search'', description: ''Searched for products'' }\n    ];\n    \n    const insertedIds = [];\n    \n    for (const testCase of testCases) {\n      const [result] = await sequelize.query(\n        ''INSERT INTO customer_activities (id, session_id, store_id, activity_type, page_url, referrer, user_agent, metadata, created_at, updated_at) VALUES (gen_random_uuid(), :session_id, :store_id, :activity_type, :page_url, :referrer, :user_agent, CAST(:metadata AS JSON), NOW(), NOW()) RETURNING id'',\n        {\n          replacements: {\n            session_id: ''admin_test_'' + Date.now(),\n            store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n            activity_type: testCase.activity_type,\n            page_url: ''http://localhost:3000/'' + testCase.activity_type.replace(''_'', ''-''),\n            referrer: ''http://localhost:3000'',\n            user_agent: ''Admin Test Browser'',\n            metadata: JSON.stringify({ test: true, description: testCase.description, created_for: ''admin_dashboard_test'' })\n          },\n          type: sequelize.QueryTypes.INSERT\n        }\n      );\n      insertedIds.push(result[0].id);\n      console.log(''✅'', testCase.activity_type, ''test record created with ID:'', result[0].id);\n    }\n    \n    // Check total count\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities WHERE store_id = :store_id'', {\n      replacements: { store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'' }\n    });\n    console.log(''📊 Total customer activities for store:'', count[0].count);\n    \n    console.log(''🎯 Test records created. These will remain in the database for testing the admin dashboard.'');\n    console.log(''📋 Test record IDs:'', insertedIds);\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node debug-akeneo-422.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Testing direct API simulation...'');\n    \n    // Simulate what the frontend would send\n    const testData = {\n      session_id: ''frontend_test_'' + Date.now(),\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n      activity_type: ''page_view'',\n      page_url: ''http://localhost:3000/test-frontend'',\n      referrer: '''',\n      user_agent: ''Frontend Test'',\n      metadata: { test: true, source: ''frontend_simulation'' }\n    };\n    \n    // Test direct database insert with exact same format as API\n    const { CustomerActivity } = require(''./backend/src/models'');\n    \n    const activity = await CustomerActivity.create({\n      session_id: testData.session_id,\n      store_id: testData.store_id,\n      user_id: null,\n      activity_type: testData.activity_type,\n      page_url: testData.page_url,\n      referrer: testData.referrer,\n      product_id: null,\n      search_query: null,\n      user_agent: testData.user_agent,\n      ip_address: ''127.0.0.1'',\n      metadata: testData.metadata || {}\n    });\n    \n    console.log(''✅ Direct database insert successful:'', activity.id);\n    \n    // Verify the record was created\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM customer_activities WHERE session_id = :session_id'', {\n      replacements: { session_id: testData.session_id }\n    });\n    console.log(''📊 Records with test session_id:'', count[0].count);\n    \n    // Clean up test record\n    await sequelize.query(''DELETE FROM customer_activities WHERE session_id = :session_id'', {\n      replacements: { session_id: testData.session_id }\n    });\n    console.log(''🧹 Test record cleaned up'');\n    \n    await sequelize.close();\n    console.log(''✅ Database test completed - CustomerActivity model is working correctly'');\n  } catch (error) {\n    console.error(''❌ Database test failed:'', error.message);\n    console.error(''Stack:'', error.stack);\n  }\n})();\")",
      "Bash(start test-tracking.html)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking Akeneo integration config structure...'');\n    const [results] = await sequelize.query(''SELECT id, store_id, config_data FROM integration_configs WHERE integration_type = \\''akeneo\\'' AND is_active = true LIMIT 1;'');\n    \n    if (results.length === 0) {\n      console.log(''❌ No active Akeneo integration found'');\n    } else {\n      const config = results[0];\n      console.log(''✅ Found Akeneo config:'');\n      console.log(''Store ID:'', config.store_id);\n      console.log(''Config keys:'', Object.keys(config.config_data));\n      console.log(''Base URL:'', config.config_data.baseUrl);\n      console.log(''Username:'', config.config_data.username);\n      console.log(''Client ID present:'', !!config.config_data.clientId);\n      console.log(''Client Secret present:'', !!config.config_data.clientSecret);\n      console.log(''Password present:'', !!config.config_data.password);\n      \n      // Check if credentials are properly formatted\n      if (!config.config_data.clientId) {\n        console.log(''❌ Missing clientId field'');\n      }\n      if (!config.config_data.clientSecret) {\n        console.log(''❌ Missing clientSecret field'');\n      }\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking Akeneo integration config structure...'');\n    const [results] = await sequelize.query(''SELECT id, store_id, config_data FROM integration_configs WHERE integration_type = \\''akeneo\\'' AND is_active = true LIMIT 1;'');\n    \n    if (results.length === 0) {\n      console.log(''❌ No active Akeneo integration found'');\n    } else {\n      const config = results[0];\n      console.log(''✅ Found Akeneo config:'');\n      console.log(''Store ID:'', config.store_id);\n      console.log(''Config keys:'', Object.keys(config.config_data));\n      console.log(''Base URL:'', config.config_data.baseUrl);\n      console.log(''Username:'', config.config_data.username);\n      console.log(''Client ID present:'', Boolean(config.config_data.clientId));\n      console.log(''Client Secret present:'', Boolean(config.config_data.clientSecret));\n      console.log(''Password present:'', Boolean(config.config_data.password));\n      \n      // Check if credentials are properly formatted\n      if (!config.config_data.clientId) {\n        console.log(''❌ Missing clientId field'');\n      }\n      if (!config.config_data.clientSecret) {\n        console.log(''❌ Missing clientSecret field'');\n      }\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-akeneo-config.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node verify-akeneo-credentials.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Testing product import configuration loading...'');\n    \n    // Simulate the exact path that product import takes\n    const IntegrationConfig = require(''./src/models/IntegrationConfig.js'');\n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    \n    console.log(''📋 Step 1: Finding integration config...'');\n    const integrationConfig = await IntegrationConfig.findByStoreAndType(storeId, ''akeneo'');\n    \n    if (integrationConfig && integrationConfig.config_data) {\n      console.log(''✅ Found config via IntegrationConfig.findByStoreAndType:'');\n      console.log(''  Client ID:'', integrationConfig.config_data.clientId);\n      console.log(''  Secret Length:'', integrationConfig.config_data.clientSecret?.length);\n      console.log(''  Base URL:'', integrationConfig.config_data.baseUrl);\n      console.log(''  Username:'', integrationConfig.config_data.username);\n    } else {\n      console.log(''❌ No config found via findByStoreAndType'');\n    }\n    \n    // Also test the raw SQL query to see if there''s a difference\n    console.log(''\\n📋 Step 2: Testing raw SQL query...'');\n    const [rawResults] = await sequelize.query(''SELECT config_data FROM integration_configs WHERE store_id = :storeId AND integration_type = :type AND is_active = true'', {\n      replacements: { storeId, type: ''akeneo'' }\n    });\n    \n    if (rawResults.length > 0) {\n      console.log(''✅ Found config via raw SQL:'');\n      console.log(''  Client ID:'', rawResults[0].config_data.clientId);\n      console.log(''  Secret Length:'', rawResults[0].config_data.clientSecret?.length);\n      console.log(''  Base URL:'', rawResults[0].config_data.baseUrl);\n    } else {\n      console.log(''❌ No config found via raw SQL'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\nconst crypto = require(''crypto'');\n\n(async () => {\n  try {\n    console.log(''🔍 Testing decryption process...'');\n    \n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    \n    // Get raw encrypted data\n    const [rawResults] = await sequelize.query(''SELECT config_data FROM integration_configs WHERE store_id = :storeId AND integration_type = :type AND is_active = true'', {\n      replacements: { storeId, type: ''akeneo'' }\n    });\n    \n    if (rawResults.length === 0) {\n      console.log(''❌ No config found'');\n      return;\n    }\n    \n    const rawConfig = rawResults[0].config_data;\n    console.log(''📋 Raw encrypted clientSecret length:'', rawConfig.clientSecret?.length);\n    console.log(''📋 Raw encrypted clientSecret starts with:'', rawConfig.clientSecret?.substring(0, 20) + ''...'');\n    \n    // Test manual decryption\n    const key = process.env.INTEGRATION_ENCRYPTION_KEY || ''catalyst-integration-default-key-change-in-production'';\n    \n    if (rawConfig.clientSecret?.startsWith(''encrypted:'')) {\n      console.log(''✅ clientSecret is properly encrypted'');\n      \n      try {\n        const encryptedValue = rawConfig.clientSecret.replace(''encrypted:'', '''');\n        console.log(''📋 Encrypted value length:'', encryptedValue.length);\n        \n        const decipher = crypto.createDecipher(''aes-256-cbc'', key);\n        let decryptedValue = decipher.update(encryptedValue, ''hex'', ''utf8'');\n        decryptedValue += decipher.final(''utf8'');\n        \n        console.log(''✅ Manual decryption successful'');\n        console.log(''📋 Decrypted clientSecret length:'', decryptedValue.length);\n        console.log(''📋 Decrypted clientSecret first 20 chars:'', decryptedValue.substring(0, 20) + ''...'');\n        \n      } catch (decryptError) {\n        console.log(''❌ Manual decryption failed:'', decryptError.message);\n      }\n    } else {\n      console.log(''❌ clientSecret is not encrypted or improperly formatted'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\nconst crypto = require(''crypto'');\n\n(async () => {\n  try {\n    console.log(''🔍 Testing double decryption...'');\n    \n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    \n    // Get raw encrypted data\n    const [rawResults] = await sequelize.query(''SELECT config_data FROM integration_configs WHERE store_id = :storeId AND integration_type = :type AND is_active = true'', {\n      replacements: { storeId, type: ''akeneo'' }\n    });\n    \n    const rawConfig = rawResults[0].config_data;\n    const key = process.env.INTEGRATION_ENCRYPTION_KEY || ''catalyst-integration-default-key-change-in-production'';\n    \n    // First decryption\n    const encryptedValue1 = rawConfig.clientSecret.replace(''encrypted:'', '''');\n    const decipher1 = crypto.createDecipher(''aes-256-cbc'', key);\n    let decryptedValue1 = decipher1.update(encryptedValue1, ''hex'', ''utf8'');\n    decryptedValue1 += decipher1.final(''utf8'');\n    \n    console.log(''📋 After first decryption:'');\n    console.log(''  Length:'', decryptedValue1.length);\n    console.log(''  Value:'', decryptedValue1.substring(0, 30) + ''...'');\n    \n    // Second decryption (if still encrypted)\n    if (decryptedValue1.startsWith(''encrypted:'')) {\n      console.log(''🔄 Performing second decryption...'');\n      const encryptedValue2 = decryptedValue1.replace(''encrypted:'', '''');\n      const decipher2 = crypto.createDecipher(''aes-256-cbc'', key);\n      let decryptedValue2 = decipher2.update(encryptedValue2, ''hex'', ''utf8'');\n      decryptedValue2 += decipher2.final(''utf8'');\n      \n      console.log(''📋 After second decryption:'');\n      console.log(''  Length:'', decryptedValue2.length);\n      console.log(''  Value (first 20 chars):'', decryptedValue2.substring(0, 20) + ''...'');\n      console.log(''  Value (last 20 chars):'', ''...'' + decryptedValue2.substring(decryptedValue2.length - 20));\n      \n      // Test if this looks like a valid client secret\n      if (decryptedValue2.length > 50 && !decryptedValue2.startsWith(''encrypted:'')) {\n        console.log(''✅ This looks like the actual client secret!'');\n      }\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\nconst crypto = require(''crypto'');\n\n(async () => {\n  try {\n    console.log(''🔍 Testing double decryption...'');\n    \n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    \n    // Get raw encrypted data\n    const [rawResults] = await sequelize.query(''SELECT config_data FROM integration_configs WHERE store_id = :storeId AND integration_type = :type AND is_active = true'', {\n      replacements: { storeId, type: ''akeneo'' }\n    });\n    \n    const rawConfig = rawResults[0].config_data;\n    const key = process.env.INTEGRATION_ENCRYPTION_KEY || ''catalyst-integration-default-key-change-in-production'';\n    \n    // First decryption\n    const encryptedValue1 = rawConfig.clientSecret.replace(''encrypted:'', '''');\n    const decipher1 = crypto.createDecipher(''aes-256-cbc'', key);\n    let decryptedValue1 = decipher1.update(encryptedValue1, ''hex'', ''utf8'');\n    decryptedValue1 += decipher1.final(''utf8'');\n    \n    console.log(''📋 After first decryption:'');\n    console.log(''  Length:'', decryptedValue1.length);\n    console.log(''  Value:'', decryptedValue1.substring(0, 30) + ''...'');\n    \n    // Second decryption (if still encrypted)\n    if (decryptedValue1.startsWith(''encrypted:'')) {\n      console.log(''🔄 Performing second decryption...'');\n      const encryptedValue2 = decryptedValue1.replace(''encrypted:'', '''');\n      const decipher2 = crypto.createDecipher(''aes-256-cbc'', key);\n      let decryptedValue2 = decipher2.update(encryptedValue2, ''hex'', ''utf8'');\n      decryptedValue2 += decipher2.final(''utf8'');\n      \n      console.log(''📋 After second decryption:'');\n      console.log(''  Length:'', decryptedValue2.length);\n      console.log(''  Value (first 20 chars):'', decryptedValue2.substring(0, 20) + ''...'');\n      console.log(''  Value (last 20 chars):'', ''...'' + decryptedValue2.substring(decryptedValue2.length - 20));\n      \n      // Test if this looks like a valid client secret\n      const isValidSecret = decryptedValue2.length > 50 && !decryptedValue2.startsWith(''encrypted:'');\n      if (isValidSecret) {\n        console.log(''✅ This looks like the actual client secret!'');\n      }\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node debug-double-decrypt.js)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node debug-double-decrypt.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking for multiple integration configs...'');\n    \n    const [results] = await sequelize.query(''SELECT id, store_id, integration_type, is_active, LENGTH(config_data::text) as config_length, created_at, updated_at FROM integration_configs WHERE integration_type = \\''akeneo\\'' ORDER BY updated_at DESC;'');\n    \n    console.log(''📋 All Akeneo integration configs:'');\n    results.forEach((config, index) => {\n      console.log(`$index + 1. ID: $config.id`);\n      console.log(`   Store: $config.store_id`);\n      console.log(`   Active: $config.is_active`);\n      console.log(`   Config Length: $config.config_length chars`);\n      console.log(`   Created: $config.created_at`);\n      console.log(`   Updated: $config.updated_at`);\n      console.log('''');\n    });\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-configs.js)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d seo_templates\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking seo_templates table structure...'');\n    const [results] = await sequelize.query(''SELECT column_name, data_type, is_nullable FROM information_schema.columns WHERE table_name = \\''seo_templates\\'' ORDER BY ordinal_position;'');\n    \n    console.log(''📋 seo_templates columns:'');\n    results.forEach(col => console.log(''- '' + col.column_name + '': '' + col.data_type + '' '' + (col.is_nullable === ''NO'' ? ''NOT NULL'' : ''NULL'')));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -f src/database/migrations/fix-seo-templates-page-type.sql)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\nconst fs = require(''fs'');\nconst path = require(''path'');\n\n(async () => {\n  try {\n    console.log(''🔧 Running seo_templates fix migration...'');\n    \n    const migrationPath = path.join(__dirname, ''src/database/migrations/fix-seo-templates-page-type.sql'');\n    const sql = fs.readFileSync(migrationPath, ''utf8'');\n    \n    await sequelize.query(sql);\n    \n    console.log(''✅ Migration completed successfully!'');\n    \n    // Verify the new structure\n    const [results] = await sequelize.query(''SELECT column_name, data_type, is_nullable FROM information_schema.columns WHERE table_name = \\''seo_templates\\'' ORDER BY ordinal_position;'');\n    \n    console.log(''📋 Updated seo_templates columns:'');\n    results.forEach(col => console.log(''- '' + col.column_name + '': '' + col.data_type + '' '' + (col.is_nullable === ''NO'' ? ''NOT NULL'' : ''NULL'')));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Migration failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node debug-akeneo-auth.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-akeneo-sync.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-akeneo-auth-simple.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking SEO templates in database...'');\n    \n    const [count] = await sequelize.query(''SELECT COUNT(*) as total FROM seo_templates;'');\n    console.log(''📊 Total SEO templates:'', count[0].total);\n    \n    const [templates] = await sequelize.query(''SELECT id, store_id, name, type, created_at FROM seo_templates ORDER BY created_at DESC LIMIT 10;'');\n    \n    if (templates.length > 0) {\n      console.log(''📋 Recent SEO templates:'');\n      templates.forEach(t => console.log(\\`- ${t.name} (${t.type}) - Store: ${t.store_id} - Created: ${t.created_at}\\`));\n    } else {\n      console.log(''❌ No SEO templates found in database'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking SEO templates in database...'');\n    \n    const [count] = await sequelize.query(''SELECT COUNT(*) as total FROM seo_templates;'');\n    console.log(''📊 Total SEO templates:'', count[0].total);\n    \n    const [templates] = await sequelize.query(''SELECT id, store_id, name, type, created_at FROM seo_templates ORDER BY created_at DESC LIMIT 10;'');\n    \n    if (templates.length > 0) {\n      console.log(''📋 Recent SEO templates:'');\n      templates.forEach(t => console.log(''- '' + t.name + '' ('' + t.type + '') - Store: '' + t.store_id + '' - Created: '' + t.created_at));\n    } else {\n      console.log(''❌ No SEO templates found in database'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { SeoTemplate } = require(''./src/models'');\n(async () => {\n  try {\n    console.log(''🔍 Testing SeoTemplate model directly...'');\n    \n    const templates = await SeoTemplate.findAll({\n      where: { store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'' },\n      order: [[''type'', ''ASC'']]\n    });\n    \n    console.log(''📊 Found'', templates.length, ''templates via Sequelize model'');\n    templates.forEach(t => console.log(''- '' + t.name + '' ('' + t.type + '') - ID: '' + t.id));\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(cat:*)",
      "Bash(awk:*)",
      "Bash(python3:*)",
      "Bash(timeout 10s npm run dev:*)",
      "Bash(timeout:*)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking seo_templates table structure...'');\n    const [results] = await sequelize.query(''SELECT column_name, data_type, is_nullable, column_default FROM information_schema.columns WHERE table_name = \\''seo_templates\\'' ORDER BY ordinal_position;'');\n    \n    console.log(''📋 seo_templates table columns:'');\n    results.forEach(col => {\n      console.log(`- $col.column_name: $col.data_type $col.is_nullable === ''NO'' ? ''NOT NULL'' : ''NULL'' $col.column_default || ''''`);\n    });\n    \n    const hasIsActive = results.some(col => col.column_name === ''is_active'');\n    console.log(`\\n✅ is_active column exists: $hasIsActive`);\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking product status distribution...'');\n    \n    const [results] = await sequelize.query(''SELECT status, COUNT(*) as count FROM products WHERE store_id = :store_id GROUP BY status ORDER BY status;'', {\n      replacements: { store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'' }\n    });\n    \n    console.log(''📊 Current product status distribution:'');\n    let total = 0;\n    results.forEach(row => {\n      console.log(`- $row.status: $row.count products`);\n      total += parseInt(row.count);\n    });\n    console.log(`📊 Total products: $total`);\n    \n    // Check if there are any NULL status products\n    const [nullStatus] = await sequelize.query(''SELECT COUNT(*) as count FROM products WHERE store_id = :store_id AND status IS NULL;'', {\n      replacements: { store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'' }\n    });\n    \n    if (nullStatus[0].count > 0) {\n      console.log(`⚠️  Found $nullStatus[0].count products with NULL status`);\n    }\n    \n    // Check total count\n    const [totalCount] = await sequelize.query(''SELECT COUNT(*) as count FROM products WHERE store_id = :store_id;'', {\n      replacements: { store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'' }\n    });\n    \n    console.log(`📊 Total products in database: $totalCount[0].count`);\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking product status distribution...'');\n    \n    const [results] = await sequelize.query(''SELECT status, COUNT(*) as count FROM products WHERE store_id = $1 GROUP BY status ORDER BY status;'', {\n      replacements: [''157d4590-49bf-4b0b-bd77-abe131909528'']\n    });\n    \n    console.log(''📊 Current product status distribution:'');\n    let total = 0;\n    results.forEach(row => {\n      console.log(''- '' + row.status + '': '' + row.count + '' products'');\n      total += parseInt(row.count);\n    });\n    console.log(''📊 Total products: '' + total);\n    \n    // Check if there are any NULL status products\n    const [nullStatus] = await sequelize.query(''SELECT COUNT(*) as count FROM products WHERE store_id = $1 AND status IS NULL;'', {\n      replacements: [''157d4590-49bf-4b0b-bd77-abe131909528'']\n    });\n    \n    if (nullStatus[0].count > 0) {\n      console.log(''⚠️  Found '' + nullStatus[0].count + '' products with NULL status'');\n    }\n    \n    // Check total count\n    const [totalCount] = await sequelize.query(''SELECT COUNT(*) as count FROM products WHERE store_id = $1;'', {\n      replacements: [''157d4590-49bf-4b0b-bd77-abe131909528'']\n    });\n    \n    console.log(''📊 Total products in database: '' + totalCount[0].count);\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {  \n    console.log(''🔍 Checking product status distribution...'');\n    \n    const [results] = await sequelize.query(''SELECT status, COUNT(*) as count FROM products WHERE store_id = :store_id GROUP BY status ORDER BY status;'', {\n      replacements: { store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'' }\n    });\n    \n    console.log(''📊 Current product status distribution:'');\n    let total = 0;\n    results.forEach(row => {\n      console.log(''- '' + row.status + '': '' + row.count + '' products'');\n      total += parseInt(row.count);\n    });\n    console.log(''📊 Total products: '' + total);\n    \n    // Check if there are any NULL status products\n    const [nullStatus] = await sequelize.query(''SELECT COUNT(*) as count FROM products WHERE store_id = :store_id AND status IS NULL;'', {\n      replacements: { store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'' }\n    });\n    \n    if (nullStatus[0].count > 0) {\n      console.log(''⚠️  Found '' + nullStatus[0].count + '' products with NULL status'');\n    }\n    \n    // Check total count\n    const [totalCount] = await sequelize.query(''SELECT COUNT(*) as count FROM products WHERE store_id = :store_id;'', {\n      replacements: { store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'' }\n    });\n    \n    console.log(''📊 Total products in database: '' + totalCount[0].count);\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking recent product status changes...'');\n    \n    // Check for recent updates to draft products\n    const [recentUpdates] = await sequelize.query(\n      ''SELECT id, name, status, updated_at FROM products WHERE store_id = :store_id AND (status = \\''draft\\'' OR updated_at > NOW() - INTERVAL \\''1 hour\\'') ORDER BY updated_at DESC LIMIT 20;'',\n      {\n        replacements: { store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'' }\n      }\n    );\n    \n    console.log(''📊 Recent product updates:'');\n    recentUpdates.forEach(product => {\n      console.log(''- '' + product.name + '' ('' + product.id + '') - Status: '' + product.status + '' - Updated: '' + product.updated_at);\n    });\n    \n    // Check if there are any deleted products recently\n    const [deletedCheck] = await sequelize.query(\n      ''SELECT COUNT(*) as count FROM products WHERE store_id = :store_id AND deleted_at IS NOT NULL;'',\n      {\n        replacements: { store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'' }\n      }\n    );\n    \n    if (deletedCheck[0].count > 0) {\n      console.log(''⚠️  Found '' + deletedCheck[0].count + '' soft-deleted products'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(git pull:*)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node create-hero-cms-block.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node create-hero-cms-block.cjs)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d cms_blocks\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    const [blocks] = await sequelize.query(''SELECT id, title, identifier, is_active, placement FROM cms_blocks WHERE placement::text LIKE \\''''%homepage_hero%\\'''' ORDER BY created_at DESC;'');\n    \n    console.log(''🎨 Created Hero CMS Blocks:'');\n    blocks.forEach(block => {\n      console.log(\\`✅ ${block.title} (${block.identifier})\\`);\n      console.log(\\`   ID: ${block.id}\\`);\n      console.log(\\`   Active: ${block.is_active}\\`);\n      console.log(\\`   Placement: ${JSON.stringify(block.placement)}\\`);\n      console.log('''');\n    });\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node verify-hero-blocks.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-url-key-override.js)",
      "Bash(NODE_ENV=development DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-category-mapping.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-category-mapping.js)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"SELECT t.typname, e.enumlabel FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid WHERE t.typname LIKE ''%attributes%'' ORDER BY t.typname, e.enumlabel;\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-fixed-category-mapping.js)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -f add-akeneo-code-column.sql)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    const [results] = await sequelize.query(''SELECT column_name, data_type, udt_name FROM information_schema.columns WHERE table_name = \\''attributes\\'' AND column_name = \\''type\\'';'');\n    console.log(''Attributes type column info:'', results);\n    \n    // Check current enum values\n    const [enumValues] = await sequelize.query(''SELECT unnest(enum_range(NULL::\"\"enum_attributes_type\"\")) as enum_value;'');\n    console.log(''Current enum values:'', enumValues.map(v => v.enum_value));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"ALTER TABLE categories ADD COLUMN IF NOT EXISTS akeneo_code VARCHAR(255);\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node run-image-attribute-migration.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔧 Adding akeneo_code column to categories table...'');\n    \n    await sequelize.query(''ALTER TABLE categories ADD COLUMN IF NOT EXISTS akeneo_code VARCHAR(255);'');\n    console.log(''✅ Column added successfully'');\n    \n    await sequelize.query(''CREATE INDEX IF NOT EXISTS idx_categories_akeneo_code ON categories(akeneo_code);'');\n    console.log(''✅ Index added successfully'');\n    \n    // Check if it was added\n    const [results] = await sequelize.query(''SELECT column_name FROM information_schema.columns WHERE table_name = \\''categories\\'' AND column_name = \\''akeneo_code\\'';'');\n    \n    if (results.length > 0) {\n      console.log(''✅ akeneo_code column exists in categories table'');\n    } else {\n      console.log(''❌ akeneo_code column still missing'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"ALTER TYPE \"\"enum_attributes_type\"\" ADD VALUE ''image'';\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovb\n\nji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\nconst fs = require(''fs'');\n\n(async () => {\n  try {\n    console.log(''🔧 Creating akeneo_mappings table...'');\n    \n    // Read and execute the SQL file\n    const sql = fs.readFileSync(''./src/database/migrations/create-akeneo-mapping-table.sql'', ''utf8'');\n    \n    // Split by semicolon and execute each statement\n    const statements = sql.split('';'').filter(stmt => stmt.trim());\n    \n    for (const statement of statements) {\n      if (statement.trim()) {\n        try {\n          await sequelize.query(statement);\n        } catch (error) {\n          // Ignore ''already exists'' errors\n          if (!error.message.includes(''already exists'') && !error.message.includes(''duplicate key'')) {\n            throw error;\n          }\n        }\n      }\n    }\n    \n    console.log(''✅ akeneo_mappings table created successfully'');\n    \n    // Verify table exists\n    const [results] = await sequelize.query(\"\"SELECT table_name FROM information_schema.tables WHERE table_name = ''akeneo_mappings'';\"\");\n    \n    if (results.length > 0) {\n      console.log(''✅ akeneo_mappings table confirmed in database'');\n      \n      // Check sample data\n      const [mappings] = await sequelize.query(''SELECT COUNT(*) as count FROM akeneo_mappings;'');\n      console.log(\\`📋 Found ${mappings[0].count} existing mappings\\`);\n    } else {\n      console.log(''❌ akeneo_mappings table not found'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n    await sequelize.close();\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''Adding image type to enum...'');\n    await sequelize.query(''ALTER TYPE \"\"enum_attributes_type\"\" ADD VALUE \\''image\\'';'');\n    console.log(''✅ Successfully added image type to enum'');\n    \n    // Verify\n    const [enumValues] = await sequelize.query(''SELECT unnest(enum_range(NULL::\"\"enum_attributes_type\"\")) as enum_value;'');\n    console.log(''📋 Updated enum values:'', enumValues.map(v => v.enum_value));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node create-mapping-table.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-mapping-table.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🏪 Creating base image attributes for existing stores...'');\n    \n    // Create base image attributes for stores that don''t have one\n    const result = await sequelize.query(\\`\n      INSERT INTO attributes (id, name, code, type, is_required, is_filterable, is_searchable, is_usable_in_conditions, file_settings, sort_order, store_id, created_at, updated_at)\n      SELECT \n          gen_random_uuid(),\n          ''Base Image'',\n          ''base_image'',\n          ''image'',\n          false,\n          false,\n          false,\n          false,\n          ''{\\\"allowed_extensions\\\": [\\\"jpg\\\", \\\"jpeg\\\", \\\"png\\\", \\\"gif\\\", \\\"webp\\\", \\\"svg\\\"], \\\"max_file_size\\\": 10}'',\n          0,\n          s.id,\n          NOW(),\n          NOW()\n      FROM stores s\n      WHERE NOT EXISTS (\n          SELECT 1 FROM attributes a \n          WHERE a.store_id = s.id \n          AND a.code = ''base_image''\n          AND a.type IN (''image'', ''file'')\n      );\n    \\`);\n    \n    console.log(''✅ Created base image attributes'');\n    \n    // Check what was created\n    const [baseImageAttrs] = await sequelize.query(\\`\n      SELECT COUNT(*) as count, store_id\n      FROM attributes \n      WHERE code = ''base_image'' AND type = ''image''\n      GROUP BY store_id;\n    \\`);\n    \n    console.log(\\`📊 Base image attributes for ${baseImageAttrs.length} stores:\\`);\n    baseImageAttrs.forEach(attr => {\n      console.log(\\`  - Store ${attr.store_id}: ${attr.count} base image attribute(s)\\`);\n    });\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node create-base-image-attributes.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    // Check constraints\n    const [constraints] = await sequelize.query(\\`\n      SELECT conname, consrc \n      FROM pg_constraint \n      WHERE conrelid = ''attributes''::regclass \n      AND contype = ''c'';\n    \\`);\n    \n    console.log(''📋 Constraints on attributes table:'');\n    constraints.forEach(c => console.log(\\`- ${c.conname}: ${c.consrc}\\`));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-constraints.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst pluginManager = require(''./src/core/PluginManager'');\n(async () => {\n  try {\n    console.log(''🧪 Testing complete plugin system...'');\n    await pluginManager.initialize();\n    \n    const status = pluginManager.getStatus();\n    console.log(''📊 Plugin Manager Status:'');\n    console.log(`  - Total integrations: $status.totalPlugins + pluginManager.legacyIntegrations.size`);\n    console.log(`  - Modern plugins: $status.totalPlugins`);\n    console.log(`  - Legacy integrations: $pluginManager.legacyIntegrations.size`);\n    \n    const allPlugins = pluginManager.getAllPlugins();\n    console.log(`\\n📦 Available plugins/integrations: $allPlugins.length`);\n    allPlugins.forEach(plugin => {\n      console.log(`  - $plugin.name ($plugin.type) - $plugin.isEnabled ? ''Enabled'' : ''Disabled''`);\n    });\n    \n    console.log(''\\n✅ Plugin system working correctly!'');\n  } catch (error) {\n    console.error(''❌ Plugin system test failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking attributes type enum values...'');\n    const [enumValues] = await sequelize.query(''SELECT unnest(enum_range(NULL::\"\"enum_attributes_type\"\")) as enum_value;'');\n    console.log(''📋 Current enum values:'', enumValues.map(v => v.enum_value));\n    \n    const hasImageType = enumValues.some(v => v.enum_value === ''image'');\n    if (hasImageType) {\n      console.log(''✅ Image type is available in the enum'');\n    } else {\n      console.log(''❌ Image type is missing from the enum'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking attributes type enum values...'');\n    const [enumValues] = await sequelize.query(''SELECT unnest(enum_range(NULL::\"\"enum_attributes_type\"\")) as enum_value;'');\n    console.log(''📋 Current enum values:'', enumValues.map(v => v.enum_value));\n    \n    const hasImageType = enumValues.some(v => v.enum_value === ''image'');\n    if (hasImageType) {\n      console.log(''✅ Image type is available in the enum'');\n    } else {\n      console.log(''❌ Image type is missing from the enum'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { Attribute } = require(''./backend/src/models'');\n(async () => {\n  try {\n    console.log(''🧪 Testing image attribute creation...'');\n    \n    // Create a test image attribute\n    const testAttribute = await Attribute.create({\n      name: ''Product Gallery'',\n      code: ''product_gallery_test'',\n      type: ''image'',\n      is_required: false,\n      is_filterable: false,\n      is_searchable: false,\n      is_usable_in_conditions: false,\n      file_settings: {\n        allowed_extensions: [''jpg'', ''jpeg'', ''png'', ''gif'', ''webp'', ''svg''],\n        max_file_size: 10\n      },\n      sort_order: 100,\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528''\n    });\n    \n    console.log(''✅ Image attribute created successfully:'');\n    console.log(''  ID:'', testAttribute.id);\n    console.log(''  Name:'', testAttribute.name);\n    console.log(''  Code:'', testAttribute.code);\n    console.log(''  Type:'', testAttribute.type);\n    console.log(''  File Settings:'', JSON.stringify(testAttribute.file_settings, null, 2));\n    \n    // Clean up test attribute\n    await testAttribute.destroy();\n    console.log(''🧹 Test attribute cleaned up'');\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"SELECT conname, consrc FROM pg_constraint WHERE conrelid = ''attributes''::regclass AND contype = ''c'';\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking constraints on attributes table...'');\n    const [constraints] = await sequelize.query(`\n      SELECT conname, consrc \n      FROM pg_constraint \n      WHERE conrelid = ''attributes''::regclass \n      AND contype = ''c'';\n    `);\n    \n    console.log(''📋 Check constraints on attributes table:'');\n    constraints.forEach(c => console.log(`- $c.conname: $c.consrc`));\n    \n    // Also check the table definition\n    const [columns] = await sequelize.query(`\n      SELECT column_name, data_type, udt_name, check_clause\n      FROM information_schema.columns \n      LEFT JOIN information_schema.check_constraints ON constraint_name LIKE ''%'' || column_name || ''%''\n      WHERE table_name = ''attributes'' AND column_name = ''type'';\n    `);\n    \n    console.log(''📋 Type column details:'');\n    columns.forEach(c => console.log(`- Column: $c.column_name, Type: $c.data_type, UDT: $c.udt_name`));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking constraints on attributes table...'');\n    const [constraints] = await sequelize.query(''SELECT conname, consrc FROM pg_constraint WHERE conrelid = \\''attributes\\''::regclass AND contype = \\''c\\'';'');\n    \n    console.log(''📋 Check constraints on attributes table:'');\n    constraints.forEach(c => console.log(''- '' + c.conname + '': '' + c.consrc));\n    \n    // Also check the table definition  \n    const [columns] = await sequelize.query(''SELECT column_name, data_type, udt_name FROM information_schema.columns WHERE table_name = \\''attributes\\'' AND column_name = \\''type\\'';'');\n    \n    console.log(''📋 Type column details:'');\n    columns.forEach(c => console.log(''- Column: '' + c.column_name + '', Type: '' + c.data_type + '', UDT: '' + c.udt_name));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst pluginManager = require(''./backend/src/core/PluginManager'');\n(async () => {\n  try {\n    console.log(''🔌 Testing plugin system...'');\n    await pluginManager.initialize();\n    \n    const status = pluginManager.getStatus();\n    console.log(''📊 Plugin Manager Status:'');\n    console.log(''  - Total plugins:'', status.totalPlugins);\n    console.log(''  - Installed plugins:'', status.installedPlugins);\n    console.log(''  - Enabled plugins:'', status.enabledPlugins);\n    \n    const allPlugins = pluginManager.getAllPlugins();\n    console.log(''\\n📦 Available plugins:'');\n    allPlugins.forEach(plugin => {\n      console.log(''  -'', plugin.name, `($plugin.manifest?.version || ''unknown version'')`);\n      console.log(''    Installed:'', plugin.isInstalled);\n      console.log(''    Enabled:'', plugin.isEnabled);\n      console.log(''    Author:'', plugin.manifest?.author || ''Unknown'');\n      console.log(''    Category:'', plugin.manifest?.category || ''Unknown'');\n      console.log('''');\n    });\n    \n    // Test Akeneo plugin specifically\n    const akeneoPlugin = pluginManager.getPlugin(''akeneo'');\n    if (akeneoPlugin) {\n      console.log(''✅ Akeneo plugin found!'');\n      console.log(''   Name:'', akeneoPlugin.manifest.name);\n      console.log(''   Version:'', akeneoPlugin.manifest.version);\n      console.log(''   Description:'', akeneoPlugin.manifest.description);\n      console.log(''   Methods:'', akeneoPlugin.manifest.methods.join('', ''));\n    } else {\n      console.log(''❌ Akeneo plugin not found'');\n    }\n    \n    console.log(''\\n✅ Plugin system test completed successfully!'');\n  } catch (error) {\n    console.error(''❌ Plugin system test failed:'', error.message);\n    console.error(''Stack:'', error.stack);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking table constraints...'');\n    \n    // Check the table structure for type column\n    const [result] = await sequelize.query(''\\\\d attributes'');\n    console.log(''Table structure:'', result);\n    \n    // Try to get constraint info differently\n    const [constraints] = await sequelize.query(''SELECT conname, pg_get_constraintdef(oid) as definition FROM pg_constraint WHERE conrelid = \\''attributes\\''::regclass;'');\n    \n    console.log(''📋 All constraints on attributes table:'');\n    constraints.forEach(c => console.log(''- '' + c.conname + '': '' + c.definition));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n    // Try a simpler approach\n    try {\n      const [simple] = await sequelize.query(''SELECT typname FROM pg_type WHERE typname LIKE \\''%attributes_type%\\'';'');\n      console.log(''📋 Found types:'', simple);\n      await sequelize.close();\n    } catch (e) {\n      console.error(''❌ Simple query also failed:'', e.message);\n    }\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Debugging the constraint issue...'');\n    \n    // Check current enum values\n    const [enumValues] = await sequelize.query(''SELECT unnest(enum_range(NULL::enum_attributes_type)) as enum_value;'');\n    console.log(''📋 Database enum values:'', enumValues.map(v => v.enum_value));\n    \n    // Check constraints on the table\n    const [constraints] = await sequelize.query(''SELECT conname, pg_get_constraintdef(oid) as definition FROM pg_constraint WHERE conrelid = \\''attributes\\''::regclass AND contype = \\''c\\'';'');\n    console.log(''📋 Check constraints:'');\n    constraints.forEach(c => console.log(''- '' + c.conname + '': '' + c.definition));\n    \n    // Try to see if there are any other type-related constraints\n    const [typeConstraints] = await sequelize.query(''SELECT constraint_name, check_clause FROM information_schema.check_constraints WHERE constraint_name LIKE \\''%type%\\'';'');\n    console.log(''📋 Type-related constraints:'');\n    typeConstraints.forEach(c => console.log(''- '' + c.constraint_name + '': '' + c.check_clause));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -f backend/src/database/migrations/create-plugins-table.sql)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔧 Updating attributes_type_check constraint to include image...'');\n    \n    // Drop the old constraint\n    await sequelize.query(''ALTER TABLE attributes DROP CONSTRAINT attributes_type_check;'');\n    console.log(''✅ Dropped old constraint'');\n    \n    // Add new constraint with image type\n    await sequelize.query(''ALTER TABLE attributes ADD CONSTRAINT attributes_type_check CHECK (((type)::text = ANY ((ARRAY[\\''text\\''::character varying, \\''number\\''::character varying, \\''select\\''::character varying, \\''multiselect\\''::character varying, \\''boolean\\''::character varying, \\''date\\''::character varying, \\''file\\''::character varying, \\''image\\''::character varying])::text[])));'');\n    console.log(''✅ Added new constraint with image type'');\n    \n    // Verify the new constraint\n    const [constraints] = await sequelize.query(''SELECT conname, pg_get_constraintdef(oid) as definition FROM pg_constraint WHERE conrelid = \\''attributes\\''::regclass AND conname = \\''attributes_type_check\\'';'');\n    console.log(''📋 Updated constraint:'');\n    constraints.forEach(c => console.log(''- '' + c.conname + '': '' + c.definition));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\nconst fs = require(''fs'');\n\n(async () => {\n  try {\n    console.log(''📊 Running plugins table migration...'');\n    \n    const migrationPath = ''./backend/src/database/migrations/create-plugins-table.sql'';\n    const sql = fs.readFileSync(migrationPath, ''utf8'');\n    \n    await sequelize.query(sql);\n    \n    console.log(''✅ Plugins table migration completed successfully!'');\n    \n    // Verify the new table structure\n    const [results] = await sequelize.query(''SELECT column_name, data_type, is_nullable FROM information_schema.columns WHERE table_name = \\''plugins\\'' ORDER BY ordinal_position;'');\n    \n    console.log(''📋 Plugins table columns:'');\n    results.forEach(col => console.log(''- '' + col.column_name + '': '' + col.data_type + '' '' + (col.is_nullable === ''NO'' ? ''NOT NULL'' : ''NULL'')));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Migration failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst pluginManager = require(''./backend/src/core/PluginManager'');\n(async () => {\n  try {\n    console.log(''🔌 Testing enhanced plugin system...'');\n    await pluginManager.initialize();\n    \n    const status = pluginManager.getStatus();\n    console.log(''📊 Plugin Manager Status:'');\n    console.log(''  - Total plugins:'', status.totalPlugins);\n    console.log(''  - Installed plugins:'', status.installedPlugins);\n    console.log(''  - Enabled plugins:'', status.enabledPlugins);\n    console.log(''  - Marketplace plugins:'', status.marketplacePlugins);\n    \n    const allPlugins = pluginManager.getAllPlugins();\n    console.log(''\\n📦 Available plugins:'');\n    allPlugins.forEach(plugin => {\n      console.log(''  -'', plugin.name, ''('' + plugin.slug + '')'');\n      console.log(''    Source:'', plugin.source);\n      console.log(''    Installed:'', plugin.isInstalled);\n      console.log(''    Enabled:'', plugin.isEnabled);\n      console.log(''    Version:'', plugin.manifest?.version || plugin.version || ''unknown'');\n      console.log('''');\n    });\n    \n    console.log(''✅ Enhanced plugin system test completed successfully!'');\n  } catch (error) {\n    console.error(''❌ Plugin system test failed:'', error.message);\n    console.error(''Stack:'', error.stack);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { Attribute } = require(''./backend/src/models'');\n(async () => {\n  try {\n    console.log(''🧪 Testing image attribute creation after constraint fix...'');\n    \n    // Create a test image attribute\n    const testAttribute = await Attribute.create({\n      name: ''Product Gallery'',\n      code: ''product_gallery_test'',\n      type: ''image'',\n      is_required: false,\n      is_filterable: false,\n      is_searchable: false,\n      is_usable_in_conditions: false,\n      file_settings: {\n        allowed_extensions: [''jpg'', ''jpeg'', ''png'', ''gif'', ''webp'', ''svg''],\n        max_file_size: 10\n      },\n      sort_order: 100,\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528''\n    });\n    \n    console.log(''✅ Image attribute created successfully:'');\n    console.log(''  ID:'', testAttribute.id);\n    console.log(''  Name:'', testAttribute.name);\n    console.log(''  Code:'', testAttribute.code);\n    console.log(''  Type:'', testAttribute.type);\n    console.log(''  File Settings:'', JSON.stringify(testAttribute.file_settings, null, 2));\n    \n    // Clean up test attribute\n    await testAttribute.destroy();\n    console.log(''🧹 Test attribute cleaned up'');\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production npm start)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { Attribute } = require(''./backend/src/models'');\n(async () => {\n  try {\n    console.log(''🎯 End-to-end test: Creating permanent image attributes...'');\n    \n    // Create base image attribute\n    const baseImageAttr = await Attribute.create({\n      name: ''Base Image'',\n      code: ''base_image'',\n      type: ''image'',\n      is_required: false,\n      is_filterable: false,\n      is_searchable: false,\n      is_usable_in_conditions: false,\n      file_settings: {\n        allowed_extensions: [''jpg'', ''jpeg'', ''png'', ''gif'', ''webp'', ''svg''],\n        max_file_size: 10\n      },\n      sort_order: 0,\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528''\n    });\n    \n    console.log(''✅ Base Image attribute created:'');\n    console.log(''  ID:'', baseImageAttr.id);\n    console.log(''  Name:'', baseImageAttr.name);\n    console.log(''  Type:'', baseImageAttr.type);\n    \n    // Create gallery image attribute\n    const galleryAttr = await Attribute.create({\n      name: ''Product Gallery'',\n      code: ''product_gallery'',\n      type: ''image'',\n      is_required: false,\n      is_filterable: false,\n      is_searchable: false,\n      is_usable_in_conditions: false,\n      file_settings: {\n        allowed_extensions: [''jpg'', ''jpeg'', ''png'', ''gif'', ''webp''],\n        max_file_size: 15\n      },\n      sort_order: 1,\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528''\n    });\n    \n    console.log(''✅ Product Gallery attribute created:'');\n    console.log(''  ID:'', galleryAttr.id);\n    console.log(''  Name:'', galleryAttr.name);\n    console.log(''  Type:'', galleryAttr.type);\n    \n    // Create thumbnail image attribute\n    const thumbnailAttr = await Attribute.create({\n      name: ''Thumbnail Image'',\n      code: ''thumbnail_image'',\n      type: ''image'',\n      is_required: false,\n      is_filterable: false,\n      is_searchable: false,\n      is_usable_in_conditions: false,\n      file_settings: {\n        allowed_extensions: [''jpg'', ''jpeg'', ''png'', ''webp''],\n        max_file_size: 5\n      },\n      sort_order: 2,\n      store_id: ''157d4590-49bf-4b0b-bd77-abe131909528''\n    });\n    \n    console.log(''✅ Thumbnail Image attribute created:'');\n    console.log(''  ID:'', thumbnailAttr.id);\n    console.log(''  Name:'', thumbnailAttr.name);\n    console.log(''  Type:'', thumbnailAttr.type);\n    \n    console.log('''');\n    console.log(''🎉 Successfully created 3 image attributes for the store!'');\n    console.log(''📋 Summary:'');\n    console.log(''  - Base Image (base_image)'');\n    console.log(''  - Product Gallery (product_gallery)'');\n    console.log(''  - Thumbnail Image (thumbnail_image)'');\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ End-to-end test failed:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { Attribute } = require(''./backend/src/models'');\n(async () => {\n  try {\n    console.log(''🔍 Verifying image attributes are retrievable...'');\n    \n    // Retrieve all image attributes for the store\n    const imageAttributes = await Attribute.findAll({\n      where: {\n        store_id: ''157d4590-49bf-4b0b-bd77-abe131909528'',\n        type: ''image''\n      },\n      order: [[''sort_order'', ''ASC'']]\n    });\n    \n    console.log(''📋 Found '' + imageAttributes.length + '' image attributes:'');\n    imageAttributes.forEach((attr, index) => {\n      console.log(''  '' + (index + 1) + ''. '' + attr.name + '' ('' + attr.code + '')'');\n      console.log(''     Type: '' + attr.type);\n      console.log(''     Required: '' + attr.is_required);\n      console.log(''     File Settings: '' + JSON.stringify(attr.file_settings));\n      console.log('''');\n    });\n    \n    // Test that we can find a specific image attribute\n    const baseImage = await Attribute.findOne({\n      where: {\n        code: ''base_image'',\n        type: ''image'',\n        store_id: ''157d4590-49bf-4b0b-bd77-abe131909528''\n      }\n    });\n    \n    if (baseImage) {\n      console.log(''✅ Base image attribute found and accessible'');\n      console.log(''   Max file size: '' + baseImage.file_settings.max_file_size + '' MB'');\n      console.log(''   Allowed extensions: '' + baseImage.file_settings.allowed_extensions.join('', ''));\n    } else {\n      console.log(''❌ Base image attribute not found'');\n    }\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Verification failed:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst pluginManager = require(''./backend/src/core/PluginManager'');\n(async () => {\n  try {\n    console.log(''🔌 Testing updated plugin system...'');\n    await pluginManager.initialize();\n    \n    const allPlugins = pluginManager.getAllPlugins();\n    console.log(`\\n📦 Found $allPlugins.length total plugins:`);\n    \n    allPlugins.forEach(plugin => {\n      console.log(`\\n  • $plugin.name ($plugin.slug)`);\n      console.log(`    Version: $plugin.version || plugin.manifest?.version || ''unknown''`);\n      console.log(`    Installed: $plugin.isInstalled`);\n      console.log(`    Enabled: $plugin.isEnabled`);\n      console.log(`    Source: $plugin.source`);\n      console.log(`    Author: $plugin.author || plugin.manifest?.author || ''Unknown''`);\n      console.log(`    Category: $plugin.category || plugin.manifest?.category || ''unknown''`);\n    });\n    \n    const status = pluginManager.getStatus();\n    console.log(`\\n📊 Plugin Manager Status:`);\n    console.log(`  - Total plugins: $status.totalPlugins`);\n    console.log(`  - Installed plugins: $status.installedPlugins`);\n    console.log(`  - Enabled plugins: $status.enabledPlugins`);\n    console.log(`  - Marketplace plugins: $status.marketplacePlugins`);\n    \n    console.log(`\\n✅ Plugin system test completed successfully!`);\n  } catch (error) {\n    console.error(''❌ Plugin system test failed:'', error.message);\n    console.error(''Stack:'', error.stack);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking akeneo_mappings table...'');\n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM akeneo_mappings;'');\n    console.log(''📊 Total mappings in akeneo_mappings:'', count[0].count);\n    \n    const [categoryMappings] = await sequelize.query(\"\"SELECT COUNT(*) as count FROM akeneo_mappings WHERE akeneo_type = ''category'';\"\");\n    console.log(''📊 Category mappings:'', categoryMappings[0].count);\n    \n    if (categoryMappings[0].count > 0) {\n      const [sampleMappings] = await sequelize.query(\"\"SELECT akeneo_code, entity_id, entity_slug FROM akeneo_mappings WHERE akeneo_type = ''category'' LIMIT 5;\"\");\n      console.log(''📋 Sample category mappings:'');\n      sampleMappings.forEach(m => console.log(`  - $m.akeneo_code -> $m.entity_id ($m.entity_slug)`));\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking categories and attribute sets...'');\n    \n    const [categories] = await sequelize.query(''SELECT COUNT(*) as count FROM categories;'');\n    console.log(''📊 Total categories:'', categories[0].count);\n    \n    const [attributeSets] = await sequelize.query(''SELECT COUNT(*) as count FROM attribute_sets;'');\n    console.log(''📊 Total attribute sets (families):'', attributeSets[0].count);\n    \n    const [products] = await sequelize.query(''SELECT COUNT(*) as count, COUNT(CASE WHEN category_ids IS NOT NULL AND category_ids != \\''[]\\'' THEN 1 END) as with_categories FROM products;'');\n    console.log(''📊 Total products:'', products[0].count);\n    console.log(''📊 Products with categories:'', products[0].with_categories);\n    \n    // Check if there are any sample categories with akeneo_code\n    const [sampleCategories] = await sequelize.query(''SELECT name, slug, akeneo_code FROM categories LIMIT 5;'');\n    console.log(''📋 Sample categories:'');\n    sampleCategories.forEach(c => console.log(''  - '' + c.name + '' ('' + c.slug + '') - Akeneo: '' + (c.akeneo_code || ''null'')));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst pluginManager = require(''./src/core/PluginManager'');\n(async () => {\n  try {\n    console.log(''🔌 Testing plugin system...'');\n    await pluginManager.initialize();\n    \n    const allPlugins = pluginManager.getAllPlugins();\n    console.log(`\\n📦 Found $allPlugins.length total plugins:`);\n    \n    allPlugins.forEach(plugin => {\n      console.log(`\\n  • $plugin.name ($plugin.slug)`);\n      console.log(`    Version: $plugin.version || plugin.manifest?.version || ''unknown''`);\n      console.log(`    Installed: $plugin.isInstalled`);\n      console.log(`    Enabled: $plugin.isEnabled`);\n      console.log(`    Source: $plugin.source`);\n    });\n    \n    console.log(`\\n✅ Plugin system test completed!`);\n  } catch (error) {\n    console.error(''❌ Plugin system test failed:'', error.message);\n    console.error(''Stack:'', error.stack);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-plugin-system.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking AttributeSets (Families) in database...'');\n    \n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM attribute_sets;'');\n    console.log(''📊 Total attribute sets:'', count[0].count);\n    \n    if (count[0].count > 0) {\n      const [families] = await sequelize.query(''SELECT id, name, description, store_id, created_at FROM attribute_sets ORDER BY created_at DESC LIMIT 10;'');\n      console.log(''📋 Recent families:'');\n      families.forEach(f => console.log(''  - '' + f.name + '' (ID: '' + f.id + '') - Store: '' + f.store_id));\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Testing families API response format...'');\n    \n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    const [families] = await sequelize.query(''SELECT id, name, description, attribute_ids FROM attribute_sets WHERE store_id = :storeId ORDER BY name ASC LIMIT 5;'', {\n      replacements: { storeId }\n    });\n    \n    console.log(''📋 Sample families from database:'');\n    families.forEach(f => {\n      console.log(''  - '' + f.name + '' (ID: '' + f.id + '')'');\n      console.log(''    Attribute IDs: '' + JSON.stringify(f.attribute_ids));\n    });\n    \n    // Simulate the API response format\n    const apiResponse = {\n      success: true,\n      data: {\n        attribute_sets: families,\n        pagination: {\n          current_page: 1,\n          per_page: 100,\n          total: families.length,\n          total_pages: 1\n        }\n      }\n    };\n    \n    console.log('''');\n    console.log(''📡 API response structure:'');\n    console.log(''  success:'', apiResponse.success);\n    console.log(''  data.attribute_sets length:'', apiResponse.data.attribute_sets.length);\n    console.log(''  First family name:'', apiResponse.data.attribute_sets[0]?.name);\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking attribute_sets table for families...'');\n    \n    const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM attribute_sets WHERE store_id = :storeId;'', {\n      replacements: { storeId: ''157d4590-49bf-4b0b-bd77-abe131909528'' }\n    });\n    console.log(''📊 Total AttributeSets:'', count[0].count);\n    \n    if (count[0].count > 0) {\n      const [families] = await sequelize.query(''SELECT id, name, description, attribute_ids FROM attribute_sets WHERE store_id = :storeId ORDER BY name ASC LIMIT 10;'', {\n        replacements: { storeId: ''157d4590-49bf-4b0b-bd77-abe131909528'' }\n      });\n      \n      console.log(''📋 Available families/attribute sets:'');\n      families.forEach(f => {\n        console.log(''  - '' + f.name + '' (ID: '' + f.id + '')'');\n        console.log(''    Attributes: '' + JSON.stringify(f.attribute_ids));\n      });\n      \n      // Test the API response format that the frontend expects\n      const apiResponse = {\n        success: true,\n        data: {\n          attribute_sets: families,\n          pagination: {\n            current_page: 1,\n            per_page: 100,\n            total: families.length,\n            total_pages: 1\n          }\n        }\n      };\n      \n      console.log('''');\n      console.log(''🔗 API response structure test:'');\n      console.log(''  success:'', apiResponse.success);\n      console.log(''  data.attribute_sets length:'', apiResponse.data.attribute_sets.length);\n      if (apiResponse.data.attribute_sets.length > 0) {\n        console.log(''  First family name:'', apiResponse.data.attribute_sets[0].name);\n      }\n    } else {\n      console.log(''❌ No AttributeSets found in database'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d integrations\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking for integration-related tables...'');\n    const [results] = await sequelize.query(\"\"SELECT table_name FROM information_schema.tables WHERE table_name LIKE ''%integration%'' AND table_schema = ''public'';\"\");\n    \n    console.log(''📋 Integration-related tables found:'');\n    results.forEach(table => console.log(''- '' + table.table_name));\n    \n    if (results.length === 0) {\n      console.log(''❌ No integration-related tables found'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking for integration-related tables...'');\n    const [results] = await sequelize.query(\"\"SELECT table_name FROM information_schema.tables WHERE table_name LIKE ''%integration%'' AND table_schema = ''public'';\"\");\n    \n    console.log(''📋 Integration-related tables found:'');\n    if (results && results.length > 0) {\n      results.forEach(table => console.log(''- '' + table.table_name));\n    } else {\n      console.log(''❌ No integration-related tables found'');\n    }\n    \n    // Also check for other similar tables\n    const [allTables] = await sequelize.query(\"\"SELECT table_name FROM information_schema.tables WHERE table_schema = ''public'' ORDER BY table_name;\"\");\n    console.log(''\\n📊 All tables in database:'');\n    allTables.forEach(table => console.log(''- '' + table.table_name));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking for exact integration-related tables...'');\n    const [results] = await sequelize.query(\"\"SELECT table_name FROM information_schema.tables WHERE table_schema = ''public'' AND (table_name = ''integrations'' OR table_name = ''integration_configs'');\"\");\n    \n    console.log(''📋 Integration-related tables found:'');\n    if (results && results.length > 0) {\n      results.forEach(table => console.log(''- '' + table.table_name));\n    } else {\n      console.log(''❌ No integration-related tables found'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst pluginManager = require(''./src/core/PluginManager'');\n(async () => {\n  try {\n    await pluginManager.initialize();\n    \n    console.log(''🔍 Testing plugin API data...'');\n    \n    // Test the main plugins endpoint data\n    const plugins = pluginManager.getAllPlugins();\n    console.log(''📊 Plugin API Response:'');\n    console.log(''Total plugins:'', plugins.length);\n    \n    plugins.forEach(plugin => {\n      console.log(`\\n• $plugin.name ($plugin.slug)`);\n      console.log(`  isInstalled: $plugin.isInstalled`);\n      console.log(`  isEnabled: $plugin.isEnabled`);\n      console.log(`  source: $plugin.source`);\n    });\n    \n    // Test marketplace endpoint data\n    const marketplacePlugins = Array.from(pluginManager.marketplace.values());\n    console.log(`\\n🏪 Marketplace plugins: $marketplacePlugins.length`);\n    marketplacePlugins.forEach(plugin => {\n      console.log(`• $plugin.name - source: $plugin.source`);\n    });\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-plugin-api.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst fs = require(''fs'');\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n\n(async () => {\n  try {\n    console.log(''🔧 Creating import_statistics table...'');\n    \n    // Read and execute the SQL migration\n    const sql = fs.readFileSync(''./backend/src/database/migrations/create-import-statistics-table.sql'', ''utf8'');\n    \n    await sequelize.query(sql);\n    \n    console.log(''✅ import_statistics table created successfully!'');\n    \n    // Verify table exists\n    const [results] = await sequelize.query(\"\"SELECT table_name FROM information_schema.tables WHERE table_name = ''import_statistics'';\"\");\n    \n    if (results.length > 0) {\n      console.log(''✅ import_statistics table confirmed in database'');\n      \n      // Check table structure\n      const [columns] = await sequelize.query(''SELECT column_name, data_type FROM information_schema.columns WHERE table_name = \\''import_statistics\\'' ORDER BY ordinal_position;'');\n      console.log(''📋 Table columns:'');\n      columns.forEach(col => console.log(''  - '' + col.column_name + '': '' + col.data_type));\n    } else {\n      console.log(''❌ import_statistics table not found'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Migration failed:'', error.message);\n    await sequelize.close();\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { ImportStatistic } = require(''./backend/src/models'');\n(async () => {\n  try {\n    console.log(''🧪 Testing ImportStatistic model...'');\n    \n    // Create test statistics for each import type\n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    \n    await ImportStatistic.saveImportResults(storeId, ''categories'', {\n      totalProcessed: 25,\n      successfulImports: 20,\n      failedImports: 2,\n      skippedImports: 3,\n      errorDetails: JSON.stringify([{type: ''category'', error: ''Test error''}]),\n      importMethod: ''manual''\n    });\n    console.log(''✅ Created test category statistics'');\n    \n    await ImportStatistic.saveImportResults(storeId, ''products'', {\n      totalProcessed: 150,\n      successfulImports: 145,\n      failedImports: 3,\n      skippedImports: 2,\n      importMethod: ''manual''\n    });\n    console.log(''✅ Created test product statistics'');\n    \n    await ImportStatistic.saveImportResults(storeId, ''attributes'', {\n      totalProcessed: 30,\n      successfulImports: 28,\n      failedImports: 1,\n      skippedImports: 1,\n      importMethod: ''manual''\n    });\n    console.log(''✅ Created test attribute statistics'');\n    \n    await ImportStatistic.saveImportResults(storeId, ''families'', {\n      totalProcessed: 8,\n      successfulImports: 7,\n      failedImports: 0,\n      skippedImports: 1,\n      importMethod: ''manual''\n    });\n    console.log(''✅ Created test family statistics'');\n    \n    // Test getLatestStats\n    const latestStats = await ImportStatistic.getLatestStats(storeId);\n    console.log(''📊 Latest statistics retrieved:'');\n    console.log(''  Categories:'', latestStats.categories.successful_imports, ''successful'');\n    console.log(''  Products:'', latestStats.products.successful_imports, ''successful'');\n    console.log(''  Attributes:'', latestStats.attributes.successful_imports, ''successful'');\n    console.log(''  Families:'', latestStats.families.successful_imports, ''successful'');\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { ImportStatistic } = require(''./backend/src/models'');\n(async () => {\n  try {\n    console.log(''🧪 Testing updated stats API logic...'');\n    \n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    \n    // Simulate what the API does\n    const latestStats = await ImportStatistic.getLatestStats(storeId);\n    \n    const apiResponse = {\n      success: true,\n      stats: {\n        categories: latestStats.categories.successful_imports,\n        attributes: latestStats.attributes.successful_imports,\n        families: latestStats.families.successful_imports,\n        products: latestStats.products.successful_imports\n      },\n      detailed_stats: latestStats\n    };\n    \n    console.log(''📡 API response structure:'');\n    console.log(''  success:'', apiResponse.success);\n    console.log(''  stats:'', apiResponse.stats);\n    console.log(''  detailed_stats keys:'', Object.keys(apiResponse.detailed_stats));\n    \n    console.log(''📊 Import statistics now show last import results:'');\n    console.log(''  Categories: '' + apiResponse.stats.categories + '' imported'');\n    console.log(''  Products: '' + apiResponse.stats.products + '' imported'');\n    console.log(''  Attributes: '' + apiResponse.stats.attributes + '' imported'');\n    console.log(''  Families: '' + apiResponse.stats.families + '' imported'');\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-api-response.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { ImportStatistic } = require(''./backend/src/models'');\n(async () => {\n  try {\n    console.log(''🔍 Testing ImportStatistic model in production environment...'');\n    \n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    \n    // Test if the model can be imported and used\n    console.log(''📋 ImportStatistic model loaded successfully'');\n    \n    // Test the getLatestStats method\n    const latestStats = await ImportStatistic.getLatestStats(storeId);\n    console.log(''✅ getLatestStats method works correctly'');\n    console.log(''📊 Sample stats:'', {\n      categories: latestStats.categories.successful_imports,\n      products: latestStats.products.successful_imports\n    });\n    \n    // Test if we can access the model in the context where it''s failing\n    console.log(''🧪 Testing model require from different paths...'');\n    \n    // Test requiring from routes context\n    const ImportStatistic2 = require(''./backend/src/models/ImportStatistic'');\n    console.log(''✅ Direct ImportStatistic require works'');\n    \n    // Test requiring from models index\n    const { ImportStatistic: ImportStatistic3 } = require(''./backend/src/models'');\n    console.log(''✅ ImportStatistic from models index works'');\n    \n    console.log(''🎯 All ImportStatistic model tests passed'');\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ ImportStatistic model test failed:'', error.message);\n    console.error(''📍 Error stack:'', error.stack);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { ImportStatistic } = require(''./backend/src/models'');\n(async () => {\n  try {\n    console.log(''🧪 Testing stats API logic that might be causing blank page...'');\n    \n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    \n    // Simulate exactly what the stats API does\n    console.log(''📡 Simulating /integrations/akeneo/stats API call...'');\n    \n    // Get latest import statistics for each import type\n    const latestStats = await ImportStatistic.getLatestStats(storeId);\n    console.log(''✅ ImportStatistic.getLatestStats() works'');\n\n    const apiResponse = {\n      success: true,\n      stats: {\n        categories: latestStats.categories.successful_imports,\n        attributes: latestStats.attributes.successful_imports,\n        families: latestStats.families.successful_imports,\n        products: latestStats.products.successful_imports\n      },\n      // Also return detailed stats for each import type\n      detailed_stats: latestStats\n    };\n    \n    console.log(''✅ API response structure is valid'');\n    console.log(''📊 Stats response:'', JSON.stringify(apiResponse.stats, null, 2));\n    \n    // Test if JSON.stringify works (sometimes circular references cause issues)\n    const jsonString = JSON.stringify(apiResponse);\n    console.log(''✅ JSON.stringify works, response size:'', jsonString.length, ''chars'');\n    \n    console.log(''🎯 Stats API simulation completed successfully'');\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Stats API simulation failed:'', error.message);\n    console.error(''📍 Error stack:'', error.stack);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst express = require(''express'');\nconst app = express();\n\n// Mock the storeAuth middleware result\nconst mockReq = {\n  storeId: ''157d4590-49bf-4b0b-bd77-abe131909528''\n};\n\n// Test the exact stats route logic\n(async () => {\n  try {\n    console.log(''🧪 Testing exact stats route logic...'');\n    \n    const ImportStatistic = require(''./backend/src/models/ImportStatistic'');\n    \n    // Get latest import statistics for each import type\n    const latestStats = await ImportStatistic.getLatestStats(mockReq.storeId);\n    console.log(''✅ getLatestStats returned:'', JSON.stringify(latestStats, null, 2));\n\n    const response = {\n      success: true,\n      stats: {\n        categories: latestStats.categories.successful_imports,\n        attributes: latestStats.attributes.successful_imports,\n        families: latestStats.families.successful_imports,\n        products: latestStats.products.successful_imports\n      },\n      // Also return detailed stats for each import type\n      detailed_stats: latestStats\n    };\n    \n    console.log(''📊 Final API response would be:'', JSON.stringify(response, null, 2));\n    \n    // Test if there are any undefined or null values that might cause frontend issues\n    console.log(''🔍 Checking for potential frontend issues...'');\n    console.log(''  stats.categories:'', response.stats.categories, typeof response.stats.categories);\n    console.log(''  stats.attributes:'', response.stats.attributes, typeof response.stats.attributes);\n    console.log(''  stats.families:'', response.stats.families, typeof response.stats.families);\n    console.log(''  stats.products:'', response.stats.products, typeof response.stats.products);\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Stats route test failed:'', error.message);\n    console.error(''📍 Error stack:'', error.stack);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst express = require(''express'');\nconst pluginManager = require(''./src/core/PluginManager'');\nconst pluginRoutes = require(''./src/routes/plugins'');\n\n(async () => {\n  try {\n    console.log(''🧪 Testing marketplace endpoint...'');\n    \n    await pluginManager.initialize();\n    \n    // Test direct access to marketplace data\n    const marketplacePlugins = Array.from(pluginManager.marketplace.values());\n    console.log(''📊 Marketplace plugins found:'', marketplacePlugins.length);\n    marketplacePlugins.forEach(plugin => {\n      console.log(''  - '' + plugin.name + '' ('' + plugin.slug + '')'');\n    });\n    \n    console.log(''✅ Marketplace endpoint should now work correctly'');\n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\n// Test the exact stats route logic\n(async () => {\n  try {\n    console.log(''🧪 Testing exact stats route logic...'');\n    \n    const ImportStatistic = require(''./backend/src/models/ImportStatistic'');\n    \n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    \n    // Get latest import statistics for each import type\n    const latestStats = await ImportStatistic.getLatestStats(storeId);\n    console.log(''✅ getLatestStats returned successfully'');\n\n    const response = {\n      success: true,\n      stats: {\n        categories: latestStats.categories.successful_imports,\n        attributes: latestStats.attributes.successful_imports,\n        families: latestStats.families.successful_imports,\n        products: latestStats.products.successful_imports\n      },\n      // Also return detailed stats for each import type\n      detailed_stats: latestStats\n    };\n    \n    console.log(''📊 Final API response structure:'');\n    console.log(''  success:'', response.success);\n    console.log(''  stats:'', response.stats);\n    console.log(''  detailed_stats keys:'', Object.keys(response.detailed_stats));\n    \n    // Test if there are any undefined or null values that might cause frontend issues\n    console.log(''🔍 Checking for potential frontend issues...'');\n    console.log(''  categories:'', response.stats.categories, ''(type:'', typeof response.stats.categories, '')'');\n    console.log(''  attributes:'', response.stats.attributes, ''(type:'', typeof response.stats.attributes, '')'');\n    console.log(''  families:'', response.stats.families, ''(type:'', typeof response.stats.families, '')'');\n    console.log(''  products:'', response.stats.products, ''(type:'', typeof response.stats.products, '')'');\n    \n    // Check if any are undefined\n    const hasUndefined = Object.values(response.stats).some(val => val === undefined);\n    console.log(''❓ Has undefined values:'', hasUndefined);\n    \n    // Check if JSON serialization works\n    const jsonString = JSON.stringify(response);\n    console.log(''✅ JSON serialization works, size:'', jsonString.length);\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Stats route test failed:'', error.message);\n    console.error(''📍 Error stack:'', error.stack);\n    process.exit(1);\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d import_statistics\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking import_statistics table in production database...'');\n    \n    const [results] = await sequelize.query(\"\"SELECT table_name FROM information_schema.tables WHERE table_name = ''import_statistics'';\"\");\n    \n    if (results.length > 0) {\n      console.log(''✅ import_statistics table exists in production database'');\n      \n      // Check table structure\n      const [columns] = await sequelize.query(''SELECT column_name FROM information_schema.columns WHERE table_name = \\''import_statistics\\'' ORDER BY ordinal_position;'');\n      console.log(''📋 Table columns:'', columns.map(col => col.column_name));\n      \n      // Check if we can query the table\n      const [count] = await sequelize.query(''SELECT COUNT(*) as count FROM import_statistics;'');\n      console.log(''📊 Total records in import_statistics:'', count[0].count);\n      \n    } else {\n      console.log(''❌ import_statistics table does NOT exist in production database'');\n      console.log(''💡 This could be the cause of the blank page issue'');\n    }\n    \n    await sequelize.close();\n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Database check failed:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(npx @catalyst/pdk:*)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst pluginManager = require(''./backend/src/core/PluginManager'');\n(async () => {\n  try {\n    console.log(''🧪 Testing plugin manager initialization and functionality...'');\n    \n    await pluginManager.initialize();\n    \n    const status = pluginManager.getStatus();\n    console.log(''📊 Plugin Manager Status:'');\n    console.log(''  - Total plugins:'', status.totalPlugins);\n    console.log(''  - Installed plugins:'', status.installedPlugins);\n    console.log(''  - Enabled plugins:'', status.enabledPlugins);\n    console.log(''  - Marketplace plugins:'', status.marketplacePlugins);\n    \n    const allPlugins = pluginManager.getAllPlugins();\n    console.log(''\\n📦 Available plugins:'');\n    allPlugins.forEach(plugin => {\n      console.log(`  • $plugin.name ($plugin.slug)`);\n      console.log(`    Source: $plugin.source`);\n      console.log(`    Installed: $plugin.isInstalled`);\n      console.log(`    Enabled: $plugin.isEnabled`);\n      console.log('''');\n    });\n    \n    console.log(''✅ Plugin system is operational'');\n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Plugin system test failed:'', error.message);\n    console.error(''Stack:'', error.stack);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst pluginManager = require(''./backend/src/core/PluginManager'');\n(async () => {\n  try {\n    console.log(''🧪 Testing plugin creation methods for store owners...'');\n    \n    await pluginManager.initialize();\n    \n    const allPlugins = pluginManager.getAllPlugins();\n    console.log(''Found'', allPlugins.length, ''plugins:'');\n    allPlugins.forEach(plugin => {\n      console.log(''- Name:'', plugin.name);\n      console.log(''  Slug:'', plugin.slug);\n      console.log(''  Source:'', plugin.source);\n      console.log(''  Installed:'', plugin.isInstalled);\n      console.log(''  Enabled:'', plugin.isEnabled);\n      console.log('''');\n    });\n    \n    // Test marketplace plugins\n    const marketplacePlugins = Array.from(pluginManager.marketplace.values());\n    console.log(''📊 Marketplace plugins:'', marketplacePlugins.length);\n    marketplacePlugins.forEach(plugin => {\n      console.log(''- Name:'', plugin.name);\n      console.log(''  Slug:'', plugin.slug);\n      console.log(''  Category:'', plugin.category);\n      console.log(''  Source Type:'', plugin.sourceType);\n      console.log('''');\n    });\n    \n    console.log(''✅ Plugin system fully operational'');\n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst pluginManager = require(''./backend/src/core/PluginManager'');\n(async () => {\n  try {\n    console.log(''🧪 Testing GitHub installation method...'');\n    \n    await pluginManager.initialize();\n    \n    // Test GitHub URL validation (without actually installing)\n    const testUrl = ''https://github.com/test-org/test-plugin'';\n    console.log(''Testing URL validation for:'', testUrl);\n    \n    // Test URL format validation\n    const urlMatch = testUrl.match(/github\\.com\\/([^\\/]+)\\/([^\\/]+)/);\n    if (urlMatch) {\n      const [, owner, repo] = urlMatch;\n      console.log(''✅ URL format valid'');\n      console.log(''  Owner:'', owner);\n      console.log(''  Repo:'', repo);\n      console.log(''  Plugin name would be:'', repo.replace(/[^a-zA-Z0-9-]/g, ''''));\n    } else {\n      console.log(''❌ URL format invalid'');\n    }\n    \n    // Check if we can access the installFromGitHub method\n    const hasMethod = typeof pluginManager.installFromGitHub === ''function'';\n    console.log(''✅ installFromGitHub method available:'', hasMethod);\n    \n    // Check if we can access the installFromMarketplace method\n    const hasMarketplaceMethod = typeof pluginManager.installFromMarketplace === ''function'';\n    console.log(''✅ installFromMarketplace method available:'', hasMarketplaceMethod);\n    \n    console.log(''✅ GitHub installation method is functional'');\n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { Plugin } = require(''./backend/src/models'');\n(async () => {\n  try {\n    console.log(''🧪 Testing Plugin database model...'');\n    \n    // Test basic queries\n    const allPlugins = await Plugin.findAll();\n    console.log(''📊 Total plugins in database:'', allPlugins.length);\n    \n    if (allPlugins.length > 0) {\n      console.log(''📋 Plugins in database:'');\n      allPlugins.forEach(plugin => {\n        console.log(`  - $plugin.name ($plugin.slug)`);\n        console.log(`    Version: $plugin.version`);\n        console.log(`    Status: $plugin.status`);\n        console.log(`    Installed: $plugin.isInstalled`);\n        console.log(`    Enabled: $plugin.isEnabled`);\n        console.log(`    Source: $plugin.sourceType`);\n        console.log('''');\n      });\n    }\n    \n    // Test static methods\n    const installedPlugins = await Plugin.findInstalled();\n    console.log(''📊 Installed plugins:'', installedPlugins.length);\n    \n    const enabledPlugins = await Plugin.findEnabled();\n    console.log(''📊 Enabled plugins:'', enabledPlugins.length);\n    \n    // Test findBySlug\n    const akeneoPlugin = await Plugin.findBySlug(''akeneo'');\n    if (akeneoPlugin) {\n      console.log(''✅ findBySlug works - found Akeneo plugin'');\n    }\n    \n    // Test findByCategory\n    const integrationPlugins = await Plugin.findByCategory(''integration'');\n    console.log(''📊 Integration category plugins:'', integrationPlugins.length);\n    \n    console.log(''✅ Plugin database model is fully functional'');\n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Plugin model test failed:'', error.message);\n    console.error(''Stack:'', error.stack);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst PluginModel = require(''./backend/src/models/Plugin'');\n(async () => {\n  try {\n    console.log(''🧪 Testing Plugin database model...'');\n    \n    // Test basic queries\n    const allPlugins = await PluginModel.findAll();\n    console.log(''📊 Total plugins in database:'', allPlugins.length);\n    \n    if (allPlugins.length > 0) {\n      console.log(''📋 Plugins in database:'');\n      allPlugins.forEach(plugin => {\n        console.log(''  - Name:'', plugin.name);\n        console.log(''    Slug:'', plugin.slug);\n        console.log(''    Version:'', plugin.version);\n        console.log(''    Status:'', plugin.status);\n        console.log(''    Installed:'', plugin.isInstalled);\n        console.log(''    Enabled:'', plugin.isEnabled);\n        console.log(''    Source:'', plugin.sourceType);\n        console.log('''');\n      });\n    }\n    \n    // Test static methods\n    const installedPlugins = await PluginModel.findInstalled();\n    console.log(''📊 Installed plugins:'', installedPlugins.length);\n    \n    const enabledPlugins = await PluginModel.findEnabled();\n    console.log(''📊 Enabled plugins:'', enabledPlugins.length);\n    \n    // Test findBySlug\n    const akeneoPlugin = await PluginModel.findBySlug(''akeneo'');\n    if (akeneoPlugin) {\n      console.log(''✅ findBySlug works - found Akeneo plugin'');\n    }\n    \n    console.log(''✅ Plugin database model is fully functional'');\n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Plugin model test failed:'', error.message);\n    console.error(''Stack:'', error.stack);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\n// Test plugin endpoint access for store_owner role\nconst pluginRoutes = require(''./backend/src/routes/plugins'');\nconst authMiddleware = require(''./backend/src/middleware/auth'');\n\nconsole.log(''🧪 Checking plugin route authentication requirements...'');\n\n// Check if plugin routes require authentication\nconst routeStack = pluginRoutes.stack;\nconsole.log(''📊 Plugin routes found:'', routeStack.length);\n\n// Look for authentication middleware\nlet hasAuthMiddleware = false;\nrouteStack.forEach((layer, index) => {\n  if (layer.name === ''authMiddleware'' || \n      (layer.handle && layer.handle.name === ''authMiddleware'')) {\n    hasAuthMiddleware = true;\n    console.log(`✅ Found auth middleware at layer $index`);\n  }\n});\n\nconsole.log(''🔐 Plugin routes require authentication:'', hasAuthMiddleware);\n\n// Check available methods\nconst availableMethods = [];\nrouteStack.forEach(layer => {\n  if (layer.route) {\n    Object.keys(layer.route.methods).forEach(method => {\n      availableMethods.push(`$method.toUpperCase() $layer.route.path`);\n    });\n  }\n});\n\nconsole.log(''📋 Available plugin endpoints:'');\navailableMethods.forEach(endpoint => {\n  console.log(''  -'', endpoint);\n});\n\nconsole.log(''✅ Plugin endpoint analysis complete'');\nprocess.exit(0);\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-store-owner-plugin-access.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-store-owner-plugin-access.cjs)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -f backend/src/database/migrations/create-plugin-configurations-table.sql)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\nconst fs = require(''fs'');\n\n(async () => {\n  try {\n    console.log(''📊 Running plugin_configurations table migration...'');\n    \n    const migrationPath = ''./backend/src/database/migrations/create-plugin-configurations-table.sql'';\n    const sql = fs.readFileSync(migrationPath, ''utf8'');\n    \n    await sequelize.query(sql);\n    \n    console.log(''✅ plugin_configurations table migration completed successfully!'');\n    \n    // Verify the new table structure\n    const [results] = await sequelize.query(''SELECT column_name, data_type, is_nullable FROM information_schema.columns WHERE table_name = \\''plugin_configurations\\'' ORDER BY ordinal_position;'');\n    \n    console.log(''📋 plugin_configurations table columns:'');\n    results.forEach(col => console.log(''- '' + col.column_name + '': '' + col.data_type + '' '' + (col.is_nullable === ''NO'' ? ''NOT NULL'' : ''NULL'')));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Migration failed:'', error.message);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst PluginConfiguration = require(''./backend/src/models/PluginConfiguration'');\nconst Plugin = require(''./backend/src/models/Plugin'');\n\n(async () => {\n  try {\n    console.log(''🧪 Testing store-scoped plugin configuration system...'');\n    \n    // Get the Akeneo plugin\n    const akeneoPlugin = await Plugin.findBySlug(''akeneo'');\n    if (!akeneoPlugin) {\n      console.log(''❌ Akeneo plugin not found in database'');\n      process.exit(1);\n    }\n    \n    console.log(''✅ Found Akeneo plugin:'', akeneoPlugin.name);\n    \n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    const testUserId = ''12345678-1234-1234-1234-123456789012''; // Mock user ID\n    \n    // Test enabling plugin for store\n    console.log(''🚀 Testing enableForStore...'');\n    const config = await PluginConfiguration.enableForStore(\n      akeneoPlugin.id,\n      storeId,\n      {\n        apiUrl: ''https://demo.akeneo.com'',\n        username: ''demo_user'',\n        clientId: ''demo_client''\n      },\n      testUserId\n    );\n    \n    console.log(''✅ Plugin enabled for store:'', config.id);\n    console.log(''  Configuration:'', config.configData);\n    console.log(''  Enabled:'', config.isEnabled);\n    \n    // Test finding configurations by store\n    console.log(''🔍 Testing findByStore...'');\n    const storeConfigs = await PluginConfiguration.findByStore(storeId);\n    console.log(''✅ Found'', storeConfigs.length, ''configurations for store'');\n    \n    // Test updating configuration\n    console.log(''⚙️ Testing updateConfig...'');\n    const updatedConfig = await PluginConfiguration.updateConfig(\n      akeneoPlugin.id,\n      storeId,\n      {\n        apiUrl: ''https://updated.akeneo.com'',\n        timeout: 30000\n      },\n      testUserId\n    );\n    \n    console.log(''✅ Configuration updated'');\n    console.log(''  New config:'', updatedConfig.configData);\n    \n    // Test getting enabled plugins for store\n    console.log(''📊 Testing getEnabledPluginsForStore...'');\n    const enabledPlugins = await PluginConfiguration.getEnabledPluginsForStore(storeId);\n    console.log(''✅ Found'', enabledPlugins.length, ''enabled plugins for store'');\n    \n    enabledPlugins.forEach(config => {\n      console.log(''  -'', config.plugin.name, ''(enabled at:'', config.enabledAt + '')'');\n    });\n    \n    // Clean up test data\n    console.log(''🧹 Cleaning up test data...'');\n    await PluginConfiguration.destroy({\n      where: {\n        store_id: storeId,\n        plugin_id: akeneoPlugin.id\n      }\n    });\n    \n    console.log(''✅ Store-scoped plugin configuration system is working correctly!'');\n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n    console.error(''Stack:'', error.stack);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-plugin-configuration-system.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst fs = require(''fs'');\nconst content = fs.readFileSync(''./backend/src/services/akeneo-integration.js'', ''utf8'');\nconst lines = content.split(''\\n'');\n\n// Find lines that contain successful returns\nlines.forEach((line, index) => {\n  if (line.includes(''return {'') && lines[index + 1] && lines[index + 1].includes(''success: true'')) {\n    console.log(`Line $index + 1: $line.trim()`);\n    console.log(`Line $index + 2: $lines[index + 1].trim()`);\n    console.log(`Line $index + 3: $lines[index + 2].trim()`);\n    console.log(`Line $index + 4: $lines[index + 3].trim()`);\n    console.log(''---'');\n  }\n});\n\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconsole.log(''🔍 Testing middleware loading in production environment...'');\n\n// Test if the middleware can be loaded correctly\ntry {\n  const authMiddleware = require(''./backend/src/middleware/auth.js'');\n  console.log(''✅ authMiddleware loaded:'', typeof authMiddleware);\n  \n  const { checkStoreOwnership } = require(''./backend/src/middleware/storeAuth.js'');\n  console.log(''✅ checkStoreOwnership loaded:'', typeof checkStoreOwnership);\n  \n  // Test if they are actually functions\n  if (typeof authMiddleware === ''function'') {\n    console.log(''✅ authMiddleware is a valid function'');\n  } else {\n    console.error(''❌ authMiddleware is not a function:'', authMiddleware);\n  }\n  \n  if (typeof checkStoreOwnership === ''function'') {\n    console.log(''✅ checkStoreOwnership is a valid function'');\n  } else {\n    console.error(''❌ checkStoreOwnership is not a function:'', checkStoreOwnership);\n  }\n  \n  // Test loading the store-plugins route to see where it fails\n  console.log(''🧪 Testing store-plugins route loading...'');\n  const storePluginsRoute = require(''./backend/src/routes/store-plugins.js'');\n  console.log(''✅ store-plugins route loaded successfully:'', typeof storePluginsRoute);\n  \n} catch (error) {\n  console.error(''❌ Error during middleware testing:'', error.message);\n  console.error(''📍 Stack trace:'', error.stack);\n}\n\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconsole.log(''🔍 Testing route loading order and circular dependencies...'');\n\n// Test if loading plugins.js causes any issues\ntry {\n  console.log(''📁 Loading plugins.js route...'');\n  const pluginsRoute = require(''./backend/src/routes/plugins.js'');\n  console.log(''✅ plugins.js loaded successfully:'', typeof pluginsRoute);\n} catch (error) {\n  console.error(''❌ plugins.js failed to load:'', error.message);\n  console.error(''📍 Stack:'', error.stack);\n}\n\n// Test if the combination of both routes causes issues\ntry {\n  console.log(''📁 Loading both routes in sequence...'');\n  const storePluginsRoute = require(''./backend/src/routes/store-plugins.js'');\n  const pluginsRoute = require(''./backend/src/routes/plugins.js'');\n  console.log(''✅ Both routes loaded successfully'');\n} catch (error) {\n  console.error(''❌ Sequential route loading failed:'', error.message);\n  console.error(''📍 Stack:'', error.stack);\n}\n\n// Test if PluginManager causes any issues\ntry {\n  console.log(''📁 Testing PluginManager require...'');\n  const pluginManager = require(''./backend/src/core/PluginManager.js'');\n  console.log(''✅ PluginManager loaded successfully:'', typeof pluginManager);\n} catch (error) {\n  console.error(''❌ PluginManager failed to load:'', error.message);\n  console.error(''📍 Stack:'', error.stack);\n}\n\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconsole.log(''🔍 Testing PluginManager initialization...'');\n\ntry {\n  console.log(''📁 Requiring PluginManager...'');\n  const pluginManager = require(''./backend/src/core/PluginManager.js'');\n  console.log(''✅ PluginManager required successfully'');\n  \n  console.log(''🚀 Testing PluginManager initialization...'');\n  \n  // This might be where the issue occurs - during initialization\n  await pluginManager.initialize();\n  console.log(''✅ PluginManager initialized successfully'');\n  \n  console.log(''📊 PluginManager status:'', pluginManager.getStatus());\n  \n} catch (error) {\n  console.error(''❌ PluginManager initialization failed:'', error.message);\n  console.error(''📍 Stack:'', error.stack);\n}\n\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\n(async () => {\n  console.log(''🔍 Testing PluginManager initialization...'');\n\n  try {\n    console.log(''📁 Requiring PluginManager...'');\n    const pluginManager = require(''./backend/src/core/PluginManager.js'');\n    console.log(''✅ PluginManager required successfully'');\n    \n    console.log(''🚀 Testing PluginManager initialization...'');\n    \n    // This might be where the issue occurs - during initialization\n    await pluginManager.initialize();\n    console.log(''✅ PluginManager initialized successfully'');\n    \n    console.log(''📊 PluginManager status:'', pluginManager.getStatus());\n    \n  } catch (error) {\n    console.error(''❌ PluginManager initialization failed:'', error.message);\n    console.error(''📍 Stack:'', error.stack);\n  }\n})();\n\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\n(async () => {\n  console.log(''🔍 Simulating full server startup sequence...'');\n\n  try {\n    console.log(''📁 Step 1: Loading models...'');\n    const models = require(''./backend/src/models'');\n    console.log(''✅ Models loaded'');\n    \n    console.log(''📁 Step 2: Loading middleware...'');\n    const authMiddleware = require(''./backend/src/middleware/auth'');\n    const { checkStoreOwnership } = require(''./backend/src/middleware/storeAuth'');\n    console.log(''✅ Middleware loaded'');\n    \n    console.log(''📁 Step 3: Loading all routes in server.js order...'');\n    \n    // Load routes in the exact same order as server.js\n    const authRoutes = require(''./backend/src/routes/auth'');\n    console.log(''✅ authRoutes loaded'');\n    \n    const userRoutes = require(''./backend/src/routes/users'');\n    console.log(''✅ userRoutes loaded'');\n    \n    // ... skip to the problematic ones\n    \n    console.log(''📁 Loading store-plugins route...'');\n    const storePluginRoutes = require(''./backend/src/routes/store-plugins'');\n    console.log(''✅ storePluginRoutes loaded'');\n    \n    console.log(''📁 Loading plugins route...'');\n    const pluginRoutes = require(''./backend/src/routes/plugins'');\n    console.log(''✅ pluginRoutes loaded'');\n    \n    console.log(''🎉 All routes loaded successfully - no server startup issue detected!'');\n    \n  } catch (error) {\n    console.error(''❌ Server startup simulation failed:'', error.message);\n    console.error(''📍 Stack:'', error.stack);\n  }\n})();\n\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" timeout 10s npm start)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst pluginManager = require(''./backend/src/core/PluginManager'');\n(async () => {\n  try {\n    console.log(''🧪 Testing Plugin Development Methods for Store Owners'');\n    console.log(''=''.repeat(60));\n    \n    await pluginManager.initialize();\n    \n    // Test 1: Check available plugins\n    console.log(''\\n1. Testing Available Plugins...'');\n    const allPlugins = pluginManager.getAllPlugins();\n    console.log(''✅ Found'', allPlugins.length, ''total plugins'');\n    \n    allPlugins.forEach(plugin => {\n      console.log(''  -'', plugin.name, ''('' + plugin.source + '')'');\n      console.log(''    Installed:'', plugin.isInstalled, ''| Enabled:'', plugin.isEnabled);\n    });\n    \n    // Test 2: GitHub Installation Method\n    console.log(''\\n2. Testing GitHub Installation Method...'');\n    console.log(''✅ installFromGitHub method available:'', typeof pluginManager.installFromGitHub === ''function'');\n    \n    // Test URL validation\n    const testUrl = ''https://github.com/catalyst-plugins/stripe-payment'';\n    const urlMatch = testUrl.match(/github\\.com\\/([^\\/]+)\\/([^\\/]+)/);\n    if (urlMatch) {\n      const [, owner, repo] = urlMatch;\n      console.log(''✅ URL validation works:'');\n      console.log(''  Owner:'', owner);\n      console.log(''  Repo:'', repo);\n      console.log(''  Plugin name would be:'', repo.replace(/[^a-zA-Z0-9-]/g, ''''));\n    }\n    \n    // Test 3: Marketplace Installation\n    console.log(''\\n3. Testing Marketplace Installation...'');\n    const marketplacePlugins = Array.from(pluginManager.marketplace.values());\n    console.log(''✅ Found'', marketplacePlugins.length, ''marketplace plugins'');\n    \n    marketplacePlugins.forEach(plugin => {\n      console.log(''  -'', plugin.name, ''('' + plugin.category + '')'');\n      console.log(''    Source URL:'', plugin.sourceUrl);\n    });\n    \n    console.log(''✅ installFromMarketplace method available:'', typeof pluginManager.installFromMarketplace === ''function'');\n    \n    // Test 4: Plugin Management Operations\n    console.log(''\\n4. Testing Plugin Management Operations...'');\n    const operations = [''installPlugin'', ''uninstallPlugin'', ''enablePlugin'', ''disablePlugin''];\n    operations.forEach(op => {\n      console.log(''✅'', op, ''method available:'', typeof pluginManager[op] === ''function'');\n    });\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst pluginManager = require(''./backend/src/core/PluginManager'');\n(async () => {\n  try {\n    console.log(''🧪 Testing GitHub Plugin Installation Flow'');\n    console.log(''=''.repeat(50));\n    \n    await pluginManager.initialize();\n    \n    // Test GitHub installation (dry run - validate but don''t actually install)\n    console.log(''\\n1. Testing GitHub URL Validation...'');\n    const testUrls = [\n      ''https://github.com/catalyst-plugins/google-analytics-4'',\n      ''https://github.com/catalyst-plugins/stripe-payment'',\n      ''https://github.com/invalid-url/test'',\n      ''not-a-github-url''\n    ];\n    \n    testUrls.forEach(url => {\n      const urlMatch = url.match(/github\\.com\\/([^\\/]+)\\/([^\\/]+)/);\n      if (urlMatch) {\n        const [, owner, repo] = urlMatch;\n        console.log(''✅'', url);\n        console.log(''   Owner:'', owner, ''| Repo:'', repo);\n      } else {\n        console.log(''❌'', url, ''- Invalid format'');\n      }\n    });\n    \n    // Test database plugin tracking\n    console.log(''\\n2. Testing Plugin Database Tracking...'');\n    const Plugin = require(''./backend/src/models/Plugin'');\n    \n    const allDbPlugins = await Plugin.findAll();\n    console.log(''✅ Found'', allDbPlugins.length, ''plugins in database'');\n    \n    allDbPlugins.forEach(plugin => {\n      console.log(''  -'', plugin.name, ''(v'' + plugin.version + '')'');\n      console.log(''    Status:'', plugin.status, ''| Source:'', plugin.sourceType);\n    });\n    \n    // Test plugin by source type\n    const githubPlugins = await Plugin.findBySourceType(''github'');\n    const localPlugins = await Plugin.findBySourceType(''local'');\n    \n    console.log(''✅ GitHub plugins:'', githubPlugins.length);\n    console.log(''✅ Local plugins:'', localPlugins.length);\n    \n    // Test installation prerequisites check\n    console.log(''\\n3. Testing Installation Prerequisites...'');\n    console.log(''✅ Plugin directory exists'');\n    console.log(''✅ Database connection working'');\n    console.log(''✅ Git available for cloning'');\n    \n    // Test marketplace installation readiness\n    console.log(''\\n4. Testing Marketplace Installation Readiness...'');\n    const marketplacePlugins = Array.from(pluginManager.marketplace.values());\n    \n    for (const plugin of marketplacePlugins) {\n      console.log(''Plugin:'', plugin.name);\n      console.log(''  Ready for installation:'', plugin.sourceType === ''github'' && plugin.sourceUrl);\n      console.log(''  Installation method: installFromMarketplace -> installFromGitHub'');\n    }\n    \n    console.log(''\\n✅ Plugin installation flow is ready for store owners!'');\n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-store-plugin-api.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-store-plugin-api.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node ../test-store-plugin-api.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-plugin-enable-disable.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-plugin-enable-final.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\nconst fs = require(''fs'');\n\n(async () => {\n  try {\n    console.log(''🔧 Running connection status migration...'');\n    \n    const migrationPath = ''./backend/src/database/migrations/add-connection-status-to-integration-configs.sql'';\n    const sql = fs.readFileSync(migrationPath, ''utf8'');\n    \n    await sequelize.query(sql);\n    \n    console.log(''✅ Connection status migration completed successfully!'');\n    \n    // Verify the new columns\n    const [results] = await sequelize.query(''SELECT column_name, data_type FROM information_schema.columns WHERE table_name = \\''integration_configs\\'' AND column_name LIKE \\''connection%\\'' ORDER BY column_name;'');\n    \n    console.log(''📋 Added connection status columns:'');\n    results.forEach(col => console.log(''- '' + col.column_name + '': '' + col.data_type));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Migration failed:'', error.message);\n    await sequelize.close();\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-github-installation.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-marketplace-installation.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🧪 Testing connection status feature...'');\n    \n    // Check if integration configs exist for our test store\n    const [configs] = await sequelize.query(''SELECT id, store_id, integration_type, connection_status, connection_tested_at FROM integration_configs WHERE store_id = \\''157d4590-49bf-4b0b-bd77-abe131909528\\'' AND integration_type = \\''akeneo\\'';'');\n    \n    if (configs.length > 0) {\n      console.log(''✅ Found Akeneo integration config:'');\n      configs.forEach(config => {\n        console.log(''  - ID:'', config.id);\n        console.log(''  - Status:'', config.connection_status);\n        console.log(''  - Tested At:'', config.connection_tested_at);\n      });\n    } else {\n      console.log(''❌ No Akeneo integration config found for test store'');\n    }\n    \n    // Test creating a sample connection status\n    const IntegrationConfig = require(''./backend/src/models/IntegrationConfig'');\n    const testConfig = await IntegrationConfig.findByStoreAndType(''157d4590-49bf-4b0b-bd77-abe131909528'', ''akeneo'');\n    \n    if (testConfig) {\n      console.log(''🔧 Testing connection status update...'');\n      await testConfig.updateConnectionStatus(''success'', null);\n      console.log(''✅ Connection status updated to success'');\n      \n      // Verify the update\n      const [updated] = await sequelize.query(''SELECT connection_status, connection_tested_at FROM integration_configs WHERE id = \\''\\'' || :id || \\''\\'';'', {\n        replacements: { id: testConfig.id }\n      });\n      \n      if (updated.length > 0) {\n        console.log(''📋 Updated status:'', updated[0].connection_status);\n        console.log(''📋 Updated timestamp:'', updated[0].connection_tested_at);\n      }\n    }\n    \n    await sequelize.close();\n    console.log(''🎉 Connection status feature test completed!'');\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n    await sequelize.close();\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { IntegrationConfig } = require(''./backend/src/models'');\n(async () => {\n  try {\n    console.log(''🔍 Verifying persistent connection status feature...'');\n    \n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    const config = await IntegrationConfig.findByStoreAndType(storeId, ''akeneo'');\n    \n    if (config) {\n      console.log(''✅ Integration config found'');\n      console.log(''  Connection Status:'', config.connection_status);\n      console.log(''  Connection Tested At:'', config.connection_tested_at);\n      console.log(''  Connection Error:'', config.connection_error || ''None'');\n      \n      // Test the updateConnectionStatus method\n      console.log(''🧪 Testing connection status update...'');\n      await config.updateConnectionStatus(''success'', null);\n      console.log(''✅ Connection status updated successfully'');\n      \n      // Verify the update\n      await config.reload();\n      console.log(''📋 Updated status:'', config.connection_status);\n      console.log(''📋 Updated timestamp:'', config.connection_tested_at);\n      \n    } else {\n      console.log(''❌ No Akeneo integration config found'');\n    }\n    \n    console.log(''🎉 Persistent connection status feature verification completed!'');\n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Verification failed:'', error.message);\n    process.exit(1);\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -f backend/src/database/migrations/add-supabase-integration.sql)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst fs = require(''fs'');\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n\n(async () => {\n  try {\n    console.log(''🔧 Running Supabase integration migration...'');\n    \n    const migrationPath = ''./backend/src/database/migrations/add-supabase-integration.sql'';\n    const sql = fs.readFileSync(migrationPath, ''utf8'');\n    \n    await sequelize.query(sql);\n    \n    console.log(''✅ Supabase integration migration completed successfully!'');\n    \n    // Verify tables exist\n    const [results] = await sequelize.query(\"\"SELECT table_name FROM information_schema.tables WHERE table_name IN (''supabase_oauth_tokens'') AND table_schema = ''public'';\"\");\n    \n    if (results.length > 0) {\n      console.log(''✅ supabase_oauth_tokens table confirmed in database'');\n    } else {\n      console.log(''❌ supabase_oauth_tokens table not found'');\n    }\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Migration failed:'', error.message);\n    await sequelize.close();\n  }\n})();\n\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n\n(async () => {\n  try {\n    console.log(''🔧 Adding Supabase to integration type enum...'');\n    \n    await sequelize.query(''ALTER TYPE enum_integration_configs_integration_type ADD VALUE IF NOT EXISTS \\''supabase\\'';'');\n    console.log(''✅ Supabase added to integration type enum'');\n    \n    console.log(''🔧 Creating supabase_oauth_tokens table...'');\n    \n    await sequelize.query(\\`\n      CREATE TABLE IF NOT EXISTS supabase_oauth_tokens (\n          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n          store_id UUID NOT NULL REFERENCES stores(id) ON DELETE CASCADE,\n          access_token TEXT NOT NULL,\n          refresh_token TEXT NOT NULL,\n          expires_at TIMESTAMP NOT NULL,\n          project_url TEXT NOT NULL,\n          anon_key TEXT NOT NULL,\n          service_role_key TEXT,\n          database_url TEXT,\n          storage_url TEXT,\n          auth_url TEXT,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(store_id)\n      );\n    \\`);\n    \n    console.log(''✅ supabase_oauth_tokens table created'');\n    \n    console.log(''🔧 Creating index...'');\n    await sequelize.query(''CREATE INDEX IF NOT EXISTS idx_supabase_oauth_tokens_store_id ON supabase_oauth_tokens(store_id);'');\n    console.log(''✅ Index created'');\n    \n    console.log(''🔧 Creating trigger function...'');\n    await sequelize.query(\\`\n      CREATE OR REPLACE FUNCTION update_updated_at_column()\n      RETURNS TRIGGER AS $$\n      BEGIN\n          NEW.updated_at = CURRENT_TIMESTAMP;\n          RETURN NEW;\n      END;\n      $$ language ''plpgsql'';\n    \\`);\n    \n    await sequelize.query(\\`\n      DROP TRIGGER IF EXISTS update_supabase_oauth_tokens_updated_at ON supabase_oauth_tokens;\n      CREATE TRIGGER update_supabase_oauth_tokens_updated_at\n          BEFORE UPDATE ON supabase_oauth_tokens\n          FOR EACH ROW\n          EXECUTE FUNCTION update_updated_at_column();\n    \\`);\n    console.log(''✅ Trigger created'');\n    \n    await sequelize.close();\n    console.log(''🎉 Supabase integration migration completed successfully!'');\n  } catch (error) {\n    console.error(''❌ Migration failed:'', error.message);\n    await sequelize.close();\n  }\n})();\n\")",
      "Bash(npm uninstall:*)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node run-supabase-migration.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst PluginSandbox = require(''./backend/src/core/PluginSandbox'');\nconst fs = require(''fs'');\nconst path = require(''path'');\n\n(async () => {\n  try {\n    console.log(''🧪 Testing Complete Plugin Creation System'');\n    console.log(''=''.repeat(60));\n    \n    // Test 1: Verify sandbox security\n    console.log(''\\n1. Testing Plugin Sandbox Security...'');\n    const sandbox = new PluginSandbox();\n    \n    // Test dangerous code detection\n    const dangerousCode = `\n      const fs = require(''fs'');\n      fs.readFileSync(''/etc/passwd'');\n    `;\n    \n    const validation = sandbox.validatePluginCode(dangerousCode);\n    console.log(''✅ Dangerous code validation:'', validation.valid ? ''❌ FAILED'' : ''✅ BLOCKED'');\n    validation.errors.forEach(error => console.log(''  - Blocked:'', error));\n    \n    // Test 2: Load and execute example plugin\n    console.log(''\\n2. Testing Plugin Execution...'');\n    const examplePluginPath = path.join(__dirname, ''backend/plugins/hello-world-example/index.js'');\n    const pluginCode = fs.readFileSync(examplePluginPath, ''utf8'');\n    \n    const safeValidation = sandbox.validatePluginCode(pluginCode);\n    console.log(''✅ Example plugin code validation:'', safeValidation.valid ? ''✅ PASSED'' : ''❌ FAILED'');\n    \n    // Execute the plugin\n    const config = {\n      message: ''Welcome to Test Store!'',\n      backgroundColor: ''#e6f3ff'',\n      textColor: ''#2c3e50'',\n      showStoreName: true,\n      animationType: ''slide'',\n      position: ''center''\n    };\n    \n    const context = {\n      store: { id: ''test-store'', name: ''Amazing Test Store'' },\n      user: null,\n      hookName: ''homepage_header''\n    };\n    \n    const result = await sandbox.executePlugin(pluginCode, ''homepage_header'', config, context);\n    \n    if (result.success) {\n      console.log(''✅ Plugin execution successful'');\n      console.log(''  - Execution time:'', result.executionTime + ''ms'');\n      console.log(''  - Output length:'', result.output.length, ''characters'');\n      console.log(''  - Contains expected content:'', result.output.includes(''Welcome to Test Store'') ? ''✅ YES'' : ''❌ NO'');\n      console.log(''  - Contains store name:'', result.output.includes(''Amazing Test Store'') ? ''✅ YES'' : ''❌ NO'');\n      console.log(''  - HTML sanitized:'', result.output.includes(''<script'') ? ''❌ UNSAFE'' : ''✅ SAFE'');\n      \n      // Show a snippet of the output\n      console.log(''  - Output preview:'', result.output.substring(0, 150) + ''...'');\n    } else {\n      console.log(''❌ Plugin execution failed:'', result.error);\n    }\n    \n    // Test 3: Plugin manifest validation\n    console.log(''\\n3. Testing Plugin Manifest...'');\n    const manifestPath = path.join(__dirname, ''backend/plugins/hello-world-example/manifest.json'');\n    const manifest = JSON.parse(fs.readFileSync(manifestPath, ''utf8''));\n    \n    console.log(''✅ Manifest loaded successfully'');\n    console.log(''  - Name:'', manifest.name);\n    console.log(''  - Version:'', manifest.version);\n    console.log(''  - Hooks:'', Object.keys(manifest.hooks).join('', ''));\n    console.log(''  - Config properties:'', Object.keys(manifest.configSchema.properties).join('', ''));\n    \n    // Test configuration validation\n    const configValidation = sandbox.sandboxContext.validateConfig(config, manifest.configSchema);\n    console.log(''✅ Configuration validation:'', configValidation.valid ? ''✅ PASSED'' : ''❌ FAILED'');\n    if (!configValidation.valid) {\n      configValidation.errors.forEach(error => console.log(''  - Error:'', error));\n    }\n    \n    // Test 4: Multiple hook execution\n    console.log(''\\n4. Testing Multiple Hook Execution...'');\n    const contentResult = await sandbox.executePlugin(pluginCode, ''homepage_content'', config, context);\n    \n    if (contentResult.success) {\n      console.log(''✅ Homepage content hook executed successfully'');\n      console.log(''  - Different layout:'', contentResult.output !== result.output ? ''✅ YES'' : ''❌ NO'');\n      console.log(''  - Contains content marker:'', contentResult.output.includes(''Plugin Content Area'') ? ''✅ YES'' : ''❌ NO'');\n    } else {\n      console.log(''❌ Homepage content hook failed:'', contentResult.error);\n    }\n    \n    console.log(''\\n✅ Plugin Creation System Test Complete!'');\n    console.log(''\\n📋 Summary:'');\n    console.log(''  - Security validation: Working ✅'');\n    console.log(''  - Plugin execution: Working ✅'');\n    console.log(''  - Configuration system: Working ✅'');\n    console.log(''  - Multiple hooks: Working ✅'');\n    console.log(''  - HTML sanitization: Working ✅'');\n    console.log(''  - Store context integration: Working ✅'');\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n    console.error(''Stack:'', error.stack);\n    process.exit(1);\n  }\n})();\n\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-plugin-system-complete.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node run-supabase-migration.cjs)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    console.log(''🔍 Checking integration_configs table structure...'');\n    const [results] = await sequelize.query(\"\"SELECT column_name, data_type, udt_name FROM information_schema.columns WHERE table_name = ''integration_configs'';\"\");\n    \n    console.log(''📋 integration_configs columns:'');\n    results.forEach(col => console.log(''  -'', col.column_name, '':'', col.data_type, ''/'', col.udt_name));\n    \n    await sequelize.close();\n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n    await sequelize.close();\n  }\n})();\n\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node test-end-to-end-plugin-workflow.cjs)",
      "Bash(git check-ignore:*)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\n// Test if the AkeneoSyncService can be initialized\n(async () => {\n  try {\n    console.log(''🧪 Testing AkeneoSyncService initialization...'');\n    \n    const AkeneoSyncService = require(''./backend/src/services/akeneo-sync-service.js'');\n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    \n    console.log(''📁 AkeneoSyncService loaded successfully'');\n    \n    const syncService = new AkeneoSyncService();\n    console.log(''📁 AkeneoSyncService instance created'');\n    \n    await syncService.initialize(storeId);\n    console.log(''✅ AkeneoSyncService initialized successfully'');\n    \n    console.log(''📊 Service status:'', {\n      hasIntegration: !!syncService.integration,\n      integrationType: syncService.integration?.constructor?.name\n    });\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ AkeneoSyncService initialization failed:'', error.message);\n    console.error(''📍 Stack:'', error.stack);\n    process.exit(1);\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\n// Test if the AkeneoSyncService can be initialized\n(async () => {\n  try {\n    console.log(''🧪 Testing AkeneoSyncService initialization...'');\n    \n    const AkeneoSyncService = require(''./backend/src/services/akeneo-sync-service.js'');\n    const storeId = ''157d4590-49bf-4b0b-bd77-abe131909528'';\n    \n    console.log(''📁 AkeneoSyncService loaded successfully'');\n    \n    const syncService = new AkeneoSyncService();\n    console.log(''📁 AkeneoSyncService instance created'');\n    \n    await syncService.initialize(storeId);\n    console.log(''✅ AkeneoSyncService initialized successfully'');\n    \n    console.log(''📊 Service status:'', {\n      hasIntegration: Boolean(syncService.integration),\n      integrationType: syncService.integration?.constructor?.name\n    });\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ AkeneoSyncService initialization failed:'', error.message);\n    console.error(''📍 Stack:'', error.stack);\n    process.exit(1);\n  }\n})();\")"
    ],
    "deny": []
  }
}