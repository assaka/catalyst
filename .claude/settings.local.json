{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(npm install:*)",
      "Bash(npm run dev:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(npm run build:*)",
      "Bash(vercel:*)",
      "Bash(curl:*)",
      "Bash(npm run lint)",
      "Bash(npm run lint:*)",
      "Bash(ls:*)",
      "WebFetch(domain:catalyst-backend-fzhu.onrender.com)",
      "Bash(node:*)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node debug-email-chars.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node debug-constraints.js)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -f cleanup-duplicate-tables.sql)",
      "Bash(grep:*)",
      "Bash(for file in AttributeSet.js Coupon.js DeliverySettings.js OrderItem.js ShippingMethod.js Tax.js)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(tail:*)",
      "Bash(done)",
      "Bash(mv:*)",
      "Bash(true)",
      "Bash(find:*)",
      "Bash(npm run migrate:*)",
      "Bash(cd backend)",
      "Bash(git revert:*)",
      "WebFetch(domain:catalyst-pearl.vercel.app)",
      "Bash(sed:*)",
      "Bash(git checkout:*)",
      "Bash(for:*)",
      "Bash(do echo \"Cleaning $file\")",
      "Bash(rm:*)",
      "Bash(npm run test:*)",
      "Bash(npm start)",
      "Bash(pkill:*)",
      "Bash(rg:*)",
      "Bash(npm run sync:tables:*)",
      "Bash(npm run db:query:*)",
      "Bash(npx sequelize-cli:*)",
      "Bash(taskkill:*)",
      "WebFetch(domain:localhost)",
      "Bash(do echo \"Updating $file...\")",
      "Bash(git deploy:*)",
      "Bash(npm run:*)",
      "WebFetch(domain:api.akeneo.com)",
      "Bash(timeout 5 npm start)",
      "Bash(timeout 5 npm start)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./src/database/connection'');\n(async () => {\n  try {\n    const [results] = await sequelize.query(''SELECT column_name, data_type FROM information_schema.columns WHERE table_name = \\''integration_configs\\'' ORDER BY ordinal_position;'');\n    console.log(''Current integration_configs table structure:'');\n    results.forEach(row => console.log(\\`- ${row.column_name}: ${row.data_type}\\`));\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await sequelize.close();\n  }\n})();\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d integration_configs\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -f add-integration-columns.sql)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node migrate-integration-table.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-imported-categories.js)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node -e \"\nconst { sequelize } = require(''./backend/src/database/connection.js'');\n(async () => {\n  try {\n    const [results] = await sequelize.query(''SELECT COUNT(*) as total, store_id FROM attributes GROUP BY store_id;'');\n    console.log(''Attributes count by store:'');\n    results.forEach(row => console.log(\\`Store ${row.store_id}: ${row.total} attributes\\`));\n    \n    const [sample] = await sequelize.query(''SELECT name, code, type, store_id FROM attributes LIMIT 15;'');\n    console.log(''\\nSample attributes:'');\n    sample.forEach(attr => console.log(\\`- ${attr.name} (${attr.code}) - ${attr.type} - Store: ${attr.store_id}\\`));\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    await sequelize.close();\n  }\n})();\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node check-attributes.js)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"SELECT COUNT(*) as total_attributes FROM attributes WHERE store_id = ''157d4590-49bf-4b0b-bd77-abe131909528'';\")",
      "Bash(git restore:*)",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node run-akeneo-schedules-migration.js)",
      "Bash(DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" psql $DATABASE_URL -c \"\\d akeneo_schedules\")",
      "Bash(NODE_ENV=production DATABASE_URL=\"postgresql://postgres.jqqfjfoigtwdpnlicjmh:Lgr5ovbpji64CooD@aws-0-eu-north-1.pooler.supabase.com:6543/postgres\" node verify-akeneo-schedules.js)"
    ],
    "deny": []
  }
}