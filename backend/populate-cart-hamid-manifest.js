/**
 * Populate Cart Hamid plugin with proper manifest.json
 */

const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? {
    require: true,
    rejectUnauthorized: false
  } : false
});

async function populateManifest() {
  const client = await pool.connect();

  try {
    const pluginId = '109c940f-5d33-472c-b7df-c48e68c35696'; // Cart Alert

    // Get plugin info
    const plugin = await client.query(`
      SELECT name, slug, description, author, category, version
      FROM plugin_registry
      WHERE id = $1
    `, [pluginId]);

    if (plugin.rows.length === 0) {
      console.log('‚ùå Plugin not found');
      return;
    }

    const p = plugin.rows[0];
    console.log(`üìã Populating manifest for: ${p.name}\n`);

    // Get plugin files, events, widgets
    const scripts = await client.query(`
      SELECT file_name FROM plugin_scripts WHERE plugin_id = $1
    `, [pluginId]);

    const events = await client.query(`
      SELECT event_name, file_name FROM plugin_events WHERE plugin_id = $1
    `, [pluginId]);

    const widgets = await client.query(`
      SELECT widget_id, widget_name, description, category FROM plugin_widgets WHERE plugin_id = $1
    `, [pluginId]);

    // Create comprehensive manifest
    const manifest = {
      name: p.name,
      version: p.version || "1.0.0",
      description: p.description || "A plugin for cart functionality",
      author: p.author || "System",
      category: "utility",
      type: "utility",

      // Plugin metadata
      displayName: p.name,
      slug: p.slug,
      homepage: null,
      repository: null,

      // Requirements
      requires: {
        catalyst: ">=1.0.0"
      },

      // Dependencies
      dependencies: {},

      // Features provided by this plugin
      features: [
        "Cart page alerts",
        "Event-driven architecture",
        ...(widgets.rows.length > 0 ? ["Interactive widgets"] : []),
        ...(scripts.rows.length > 0 ? ["Utility functions"] : [])
      ],

      // Events this plugin listens to
      events: events.rows.map(e => ({
        name: e.event_name,
        description: `Triggered when ${e.event_name} fires`,
        handler: `events/${e.file_name}`
      })),

      // Hooks provided
      hooks: [],

      // Widgets provided
      widgets: widgets.rows.map(w => ({
        id: w.widget_id,
        name: w.widget_name,
        description: w.description,
        category: w.category
      })),

      // Scripts/files included
      files: [
        ...events.rows.map(e => ({
          path: `events/${e.file_name}`,
          type: "event_listener",
          description: `${e.event_name} event handler`
        })),
        ...scripts.rows.map(s => ({
          path: s.file_name,
          type: s.file_name.includes('component') ? 'component' :
                s.file_name.includes('utils') ? 'utility' : 'script',
          description: s.file_name
        }))
      ],

      // Configuration schema (if plugin had settings)
      configSchema: {},

      // Permissions required
      permissions: [],

      // Installation instructions
      installation: {
        instructions: [
          "Plugin is automatically activated when enabled",
          "Navigate to /cart to see the alert and widget",
          "Widget appears above cart title",
          "Alert shows personalized greeting based on time of day"
        ]
      },

      // Support information
      support: {
        documentation: "See README.md for detailed documentation",
        issues: null,
        email: "info@itomoti.com"
      },

      // Tags for discovery
      tags: ["cart", "alert", "widget", "demo", "starter", "utilities"],

      // Starter template metadata
      starterTemplate: true,

      // Generated by
      generated_by_ai: false,
      created_with: "Catalyst Plugin System",
      created_at: new Date().toISOString()
    };

    // Update plugin_registry
    await client.query(`
      UPDATE plugin_registry
      SET manifest = $1, updated_at = NOW()
      WHERE id = $2
    `, [JSON.stringify(manifest), pluginId]);

    console.log('‚úÖ Manifest updated');
    console.log('\nüìã Manifest contents:');
    console.log(`   Name: ${manifest.name}`);
    console.log(`   Version: ${manifest.version}`);
    console.log(`   Features: ${manifest.features.length}`);
    console.log(`   Events: ${manifest.events.length}`);
    console.log(`   Widgets: ${manifest.widgets.length}`);
    console.log(`   Files: ${manifest.files.length}`);
    console.log(`   Tags: ${manifest.tags.join(', ')}`);

    console.log('\n‚úÖ manifest.json will now display in FileTree with complete plugin metadata!');

  } catch (error) {
    console.error('‚ùå Error:', error.message);
    console.error(error);
  } finally {
    client.release();
    await pool.end();
  }
}

populateManifest();
